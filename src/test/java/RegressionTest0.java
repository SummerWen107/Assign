import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;
/*
 * java -ea -classpath ..\bin\randoop-all-4.3.1.jar;..\bin\Util randoop.main.Main gentests --testclass=Util --time-limit=60
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        Util util0 = new Util();
        Class<?> wildcardClass1 = util0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        Object obj0 = new Object();
        Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Class<?> wildcardClass10 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Class<?> wildcardClass10 = intArray7.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Class<?> wildcardClass47 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int78 = util57.findKthLargestViaQuickSort(intArray74, (int) (short) 1);
        util42.getNextPermutationNumber(intArray74);
        int int81 = util32.findKthLargestViaQuickSort(intArray74, (int) (short) 10);
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        Util util87 = new Util();
        int[] intArray89 = null;
        int int90 = util87.findMinSubArrayLen((int) '4', intArray89);
        int[] intArray94 = new int[] { (byte) 10, '#', (-1) };
        int int96 = util87.findKthLargestViaQuickSort(intArray94, (int) (byte) 1);
        int int97 = util82.findMinSubArrayLen((int) '#', intArray94);
        int int98 = util32.removeDuplicateElements(intArray94);
        int int99 = util0.removeDuplicateElements(intArray94);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 4 + "'", int99 == 4);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Class<?> wildcardClass44 = intArray39.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        util32.getNextPermutationNumber(intArray40);
        int[] intArray50 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int52 = util32.threeSumClosest(intArray50, 0);
        int int54 = util0.findKthLargestViaQuickSort(intArray50, (int) (byte) 100);
        Class<?> wildcardClass55 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util50.findMinSubArrayLen((int) '#', intArray62);
        int int66 = util0.removeDuplicateElements(intArray62);
        Class<?> wildcardClass67 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Class<?> wildcardClass12 = intArray8.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util21.removeDuplicateElements(intArray76);
        int int82 = util0.findMinViaIteration(intArray76);
        Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Class<?> wildcardClass21 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Class<?> wildcardClass21 = intArray18.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Class<?> wildcardClass26 = intArray22.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Class<?> wildcardClass21 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        Class<?> wildcardClass40 = intArray36.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Class<?> wildcardClass15 = intArray13.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util0.threeSumClosest(intArray45, (-1));
        Class<?> wildcardClass50 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Class<?> wildcardClass52 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        Util util89 = new Util();
        int[] intArray91 = null;
        int int92 = util89.findMinSubArrayLen((int) '4', intArray91);
        int[] intArray96 = new int[] { (byte) 10, '#', (-1) };
        int int98 = util89.findKthLargestViaQuickSort(intArray96, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 35 + "'", int98 == 35);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Class<?> wildcardClass32 = intArray29.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        util77.getNextPermutationNumber(intArray85);
        int[] intArray95 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int97 = util77.threeSumClosest(intArray95, 0);
        int int98 = util73.removeDuplicateElements(intArray95);
        int int99 = util0.removeDuplicateElements(intArray95);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 7 + "'", int99 == 7);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int[] intArray61 = new int[] { (short) -1, 10, '4' };
        util48.getNextPermutationNumber(intArray61);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int84 = util63.findKthLargestViaQuickSort(intArray80, (int) (short) 1);
        util48.getNextPermutationNumber(intArray80);
        Util util86 = new Util();
        int[] intArray88 = null;
        int int89 = util86.findMinSubArrayLen((int) '4', intArray88);
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int int95 = util86.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int97 = util48.threeSumClosest(intArray93, (-1));
        int int98 = util10.removeDuplicateElements(intArray93);
        int int99 = util0.findMinViaIteration(intArray93);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        util25.getNextPermutationNumber(intArray57);
        int int64 = util15.findKthLargestViaQuickSort(intArray57, (int) (short) 10);
        util0.getNextPermutationNumber(intArray57);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int[] intArray80 = new int[] { (short) -1, 10, '4' };
        util67.getNextPermutationNumber(intArray80);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int[] intArray96 = new int[] { (short) -1, 10, '4' };
        util83.getNextPermutationNumber(intArray96);
        int int98 = util67.findMinSubArrayLen(0, intArray96);
        int int99 = util0.findMinSubArrayLen((int) (short) 0, intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Class<?> wildcardClass22 = intArray17.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        util25.getNextPermutationNumber(intArray57);
        int int64 = util15.findKthLargestViaQuickSort(intArray57, (int) (short) 10);
        util0.getNextPermutationNumber(intArray57);
        Class<?> wildcardClass66 = intArray57.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int58 = util0.threeSumClosest(intArray54, (int) (byte) -1);
        Class<?> wildcardClass59 = intArray54.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        util75.getNextPermutationNumber(intArray83);
        int[] intArray93 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int95 = util75.threeSumClosest(intArray93, 0);
        int int96 = util71.removeDuplicateElements(intArray93);
        util0.getNextPermutationNumber(intArray93);
        Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int[] intArray82 = new int[] { (short) -1, 10, '4' };
        util69.getNextPermutationNumber(intArray82);
        int int84 = util53.findMinSubArrayLen(0, intArray82);
        int int86 = util43.findKthLargestViaQuickSort(intArray82, 1);
        Util util87 = new Util();
        int[] intArray89 = null;
        int int90 = util87.findMinSubArrayLen((int) '4', intArray89);
        int[] intArray94 = new int[] { (byte) 10, '#', (-1) };
        int int96 = util87.findKthLargestViaQuickSort(intArray94, (int) (byte) 1);
        util43.getNextPermutationNumber(intArray94);
        int int99 = util0.threeSumClosest(intArray94, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 52 + "'", int86 == 52);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        int int60 = util0.removeDuplicateElements(intArray55);
        Class<?> wildcardClass61 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray39 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int41 = util0.threeSumClosest(intArray39, (-1));
        Class<?> wildcardClass42 = intArray39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        int int92 = util0.findKthLargestViaQuickSort(intArray89, (int) (short) 10);
        Class<?> wildcardClass93 = intArray89.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util0.findMinViaIteration(intArray67);
        int[] intArray70 = null;
        int int72 = util0.threeSumClosest(intArray70, 7);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        Util util77 = new Util();
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        util77.getNextPermutationNumber(intArray85);
        int[] intArray95 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int97 = util77.threeSumClosest(intArray95, 0);
        int int98 = util73.removeDuplicateElements(intArray95);
        int int99 = util0.findMinViaIteration(intArray95);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Class<?> wildcardClass12 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        Class<?> wildcardClass71 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util0.findMinViaIteration(intArray67);
        Class<?> wildcardClass70 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Class<?> wildcardClass52 = intArray46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        util16.getNextPermutationNumber(intArray48);
        int int55 = util4.threeSumClosest(intArray48, 100);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util4.findMinViaIteration(intArray68);
        int int75 = util0.findMinViaIteration(intArray68);
        Class<?> wildcardClass76 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        int int52 = util21.findMinSubArrayLen(0, intArray50);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util21.removeDuplicateElements(intArray60);
        int int64 = util0.findMinViaIteration(intArray60);
        Class<?> wildcardClass65 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        int[] intArray71 = null;
        int int72 = util0.removeDuplicateElements(intArray71);
        Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int[] intArray41 = new int[] { (short) -1, 10, '4' };
        util28.getNextPermutationNumber(intArray41);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int64 = util43.findKthLargestViaQuickSort(intArray60, (int) (short) 1);
        util28.getNextPermutationNumber(intArray60);
        int int67 = util16.threeSumClosest(intArray60, 100);
        int int68 = util0.removeDuplicateElements(intArray60);
        Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        int[] intArray66 = null;
        int int67 = util21.findMinSubArrayLen(1, intArray66);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util21.threeSumClosest(intArray75, (int) (byte) -1);
        util0.getNextPermutationNumber(intArray75);
        Class<?> wildcardClass81 = intArray75.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        util75.getNextPermutationNumber(intArray83);
        int[] intArray93 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int95 = util75.threeSumClosest(intArray93, 0);
        int int96 = util71.removeDuplicateElements(intArray93);
        util0.getNextPermutationNumber(intArray93);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Class<?> wildcardClass40 = intArray36.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        util33.getNextPermutationNumber(intArray65);
        int int71 = util0.findMinSubArrayLen((int) (short) 10, intArray65);
        Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        int[] intArray54 = null;
        int int56 = util0.findKthLargestViaQuickSort(intArray54, 7);
        Class<?> wildcardClass57 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util21.removeDuplicateElements(intArray76);
        int int82 = util0.findMinViaIteration(intArray76);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util0.findMinViaIteration(intArray80);
        Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int41 = util26.findMinSubArrayLen((int) '#', intArray38);
        util22.getNextPermutationNumber(intArray38);
        int int43 = util0.removeDuplicateElements(intArray38);
        Class<?> wildcardClass44 = intArray38.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        util39.getNextPermutationNumber(intArray74);
        int int77 = util38.removeDuplicateElements(intArray74);
        int int79 = util0.findKthLargestViaQuickSort(intArray74, 4);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        Util util84 = new Util();
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        util84.getNextPermutationNumber(intArray92);
        int int97 = util80.threeSumClosest(intArray92, (int) (short) 100);
        int int99 = util0.threeSumClosest(intArray92, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.removeDuplicateElements(intArray88);
        int int93 = util0.findKthLargestViaQuickSort(intArray88, 0);
        Class<?> wildcardClass94 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray4 = null;
        int int5 = util2.findMinSubArrayLen((int) '4', intArray4);
        int[] intArray9 = new int[] { (byte) 10, '#', (-1) };
        int int11 = util2.findKthLargestViaQuickSort(intArray9, (int) (byte) 1);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int int23 = util2.findKthLargestViaQuickSort(intArray19, (int) (short) 1);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        util2.getNextPermutationNumber(intArray37);
        int int40 = util1.removeDuplicateElements(intArray37);
        int int42 = util0.findKthLargestViaQuickSort(intArray37, 52);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) 100);
        Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util8 = new Util();
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        util8.getNextPermutationNumber(intArray16);
        int[] intArray26 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int28 = util8.threeSumClosest(intArray26, 0);
        int int29 = util4.removeDuplicateElements(intArray26);
        int[] intArray31 = new int[] { (byte) 10 };
        int int33 = util4.threeSumClosest(intArray31, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = util0.findMinViaIteration(intArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int[] intArray60 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int62 = util42.threeSumClosest(intArray60, 0);
        int int63 = util38.removeDuplicateElements(intArray60);
        int int65 = util0.threeSumClosest(intArray60, 0);
        Class<?> wildcardClass66 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int77 = util62.findMinSubArrayLen((int) '#', intArray74);
        util58.getNextPermutationNumber(intArray74);
        int int79 = util0.findMinSubArrayLen((int) (byte) 1, intArray74);
        Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) -1, 10, '4' };
        util55.getNextPermutationNumber(intArray68);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int91 = util70.findKthLargestViaQuickSort(intArray87, (int) (short) 1);
        util55.getNextPermutationNumber(intArray87);
        int int94 = util45.findKthLargestViaQuickSort(intArray87, (int) (short) 10);
        int int95 = util0.findMinSubArrayLen((int) '4', intArray87);
        Class<?> wildcardClass96 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Class<?> wildcardClass22 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int33 = util12.findKthLargestViaQuickSort(intArray29, (int) (short) 1);
        Util util34 = new Util();
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        util34.getNextPermutationNumber(intArray42);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int[] intArray59 = new int[] { (short) -1, 10, '4' };
        util46.getNextPermutationNumber(intArray59);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int82 = util61.findKthLargestViaQuickSort(intArray78, (int) (short) 1);
        util46.getNextPermutationNumber(intArray78);
        int int85 = util34.threeSumClosest(intArray78, 100);
        int int87 = util12.findKthLargestViaQuickSort(intArray78, 1);
        util0.getNextPermutationNumber(intArray78);
        Class<?> wildcardClass89 = intArray78.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray51);
        Class<?> wildcardClass55 = intArray51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Class<?> wildcardClass57 = intArray51.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray39 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int41 = util0.threeSumClosest(intArray39, (-1));
        Class<?> wildcardClass42 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util58.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util0.threeSumClosest(intArray70, (int) (short) 1);
        Class<?> wildcardClass76 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util21.threeSumClosest(intArray66, (-1));
        int int71 = util0.removeDuplicateElements(intArray66);
        Class<?> wildcardClass72 = intArray66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        Class<?> wildcardClass43 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.removeDuplicateElements(intArray36);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int[] intArray75 = new int[] { (short) -1, 10, '4' };
        util62.getNextPermutationNumber(intArray75);
        util40.getNextPermutationNumber(intArray75);
        int int78 = util39.findMinViaIteration(intArray75);
        int int80 = util23.threeSumClosest(intArray75, (int) (byte) 10);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        Util util86 = new Util();
        int[] intArray88 = null;
        int int89 = util86.findMinSubArrayLen((int) '4', intArray88);
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int int95 = util86.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int96 = util81.findMinSubArrayLen((int) '#', intArray93);
        int int98 = util23.threeSumClosest(intArray93, (int) (short) 1);
        int int99 = util0.findMinSubArrayLen((int) (short) 1, intArray93);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Class<?> wildcardClass46 = intArray42.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        Class<?> wildcardClass54 = intArray50.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        util51.getNextPermutationNumber(intArray59);
        int[] intArray69 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int71 = util51.threeSumClosest(intArray69, 0);
        int int72 = util47.removeDuplicateElements(intArray69);
        int[] intArray74 = new int[] { (byte) 10 };
        int int76 = util47.threeSumClosest(intArray74, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = util0.findMinViaIteration(intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util0.findMinSubArrayLen((int) (byte) 10, intArray68);
        Class<?> wildcardClass75 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        util76.getNextPermutationNumber(intArray84);
        int[] intArray94 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int96 = util76.threeSumClosest(intArray94, 0);
        int int97 = util0.removeDuplicateElements(intArray94);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 7 + "'", int97 == 7);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        util39.getNextPermutationNumber(intArray74);
        int int77 = util38.removeDuplicateElements(intArray74);
        int int79 = util0.findKthLargestViaQuickSort(intArray74, 4);
        Class<?> wildcardClass80 = intArray74.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int int59 = util0.findMinViaIteration(intArray55);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int[] intArray78 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int80 = util60.threeSumClosest(intArray78, 0);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        util82.getNextPermutationNumber(intArray90);
        int int94 = util60.findMinSubArrayLen(52, intArray90);
        int int95 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util58.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util0.findKthLargestViaQuickSort(intArray70, (-1));
        Class<?> wildcardClass76 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        int int57 = util26.findMinSubArrayLen(0, intArray55);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        Util util84 = new Util();
        int[] intArray86 = null;
        int int87 = util84.findMinSubArrayLen((int) '4', intArray86);
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int int93 = util84.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int95 = util74.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        util59.getNextPermutationNumber(intArray91);
        int int97 = util26.findMinSubArrayLen((int) (short) 10, intArray91);
        int int98 = util0.removeDuplicateElements(intArray91);
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        util41.getNextPermutationNumber(intArray73);
        int int80 = util31.findKthLargestViaQuickSort(intArray73, (int) (short) 10);
        util16.getNextPermutationNumber(intArray73);
        int int82 = util0.removeDuplicateElements(intArray73);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int int83 = util0.findMinViaIteration(intArray80);
        Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        int int24 = util0.threeSumClosest(intArray22, (int) (byte) 100);
        Class<?> wildcardClass25 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int71 = util56.findMinSubArrayLen((int) '#', intArray68);
        util52.getNextPermutationNumber(intArray68);
        int[] intArray73 = null;
        util52.getNextPermutationNumber(intArray73);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) ' ', intArray78);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int[] intArray94 = new int[] { (short) -1, 10, '4' };
        util81.getNextPermutationNumber(intArray94);
        int int96 = util76.findMinSubArrayLen((int) '#', intArray94);
        int int97 = util52.findMinSubArrayLen((int) 'a', intArray94);
        int int99 = util0.threeSumClosest(intArray94, 5);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        int int60 = util0.removeDuplicateElements(intArray55);
        int[] intArray61 = null;
        int int63 = util0.findKthLargestViaQuickSort(intArray61, (int) (byte) 10);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int[] intArray86 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int88 = util68.threeSumClosest(intArray86, 0);
        int int89 = util64.removeDuplicateElements(intArray86);
        int[] intArray91 = new int[] { (byte) 10 };
        int int93 = util64.threeSumClosest(intArray91, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int94 = util0.findMinViaIteration(intArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        int[] intArray71 = null;
        int int72 = util0.removeDuplicateElements(intArray71);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray80);
        Class<?> wildcardClass84 = intArray80.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray35 = null;
        int int36 = util0.findMinViaIteration(intArray35);
        Class<?> wildcardClass37 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        Class<?> wildcardClass71 = intArray64.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.removeDuplicateElements(intArray88);
        util0.getNextPermutationNumber(intArray88);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int41 = util26.findMinSubArrayLen((int) '#', intArray38);
        util22.getNextPermutationNumber(intArray38);
        int int43 = util0.removeDuplicateElements(intArray38);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        util48.getNextPermutationNumber(intArray56);
        int int61 = util44.threeSumClosest(intArray56, (int) (short) 100);
        int[] intArray66 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int68 = util44.findKthLargestViaQuickSort(intArray66, 100);
        int int69 = util0.removeDuplicateElements(intArray66);
        Class<?> wildcardClass70 = intArray66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Class<?> wildcardClass57 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util65.findKthLargestViaQuickSort(intArray82, (int) (short) 1);
        util50.getNextPermutationNumber(intArray82);
        int int89 = util38.threeSumClosest(intArray82, 100);
        int int91 = util16.findKthLargestViaQuickSort(intArray82, 1);
        util4.getNextPermutationNumber(intArray82);
        int int93 = util0.findMinViaIteration(intArray82);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int88 = util67.findKthLargestViaQuickSort(intArray84, (int) (short) 1);
        util52.getNextPermutationNumber(intArray84);
        int int91 = util40.threeSumClosest(intArray84, 100);
        int int93 = util0.findKthLargestViaQuickSort(intArray84, 35);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        Class<?> wildcardClass35 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int int41 = util20.findKthLargestViaQuickSort(intArray37, (int) (short) 1);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        util20.getNextPermutationNumber(intArray55);
        int int58 = util5.removeDuplicateElements(intArray55);
        int int60 = util4.threeSumClosest(intArray55, (int) (short) 0);
        util0.getNextPermutationNumber(intArray55);
        Class<?> wildcardClass62 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util12.findMinSubArrayLen((int) '#', intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int50 = util29.findKthLargestViaQuickSort(intArray46, (int) (short) 1);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        util29.getNextPermutationNumber(intArray64);
        int int67 = util28.findMinViaIteration(intArray64);
        int int69 = util12.threeSumClosest(intArray64, (int) (byte) 10);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int85 = util70.findMinSubArrayLen((int) '#', intArray82);
        int int87 = util12.findKthLargestViaQuickSort(intArray82, (-1));
        int int89 = util0.findKthLargestViaQuickSort(intArray82, (-1));
        Class<?> wildcardClass90 = intArray82.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int58 = util0.threeSumClosest(intArray54, (int) (byte) -1);
        Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        int int63 = util0.findKthLargestViaQuickSort(intArray57, 5);
        Class<?> wildcardClass64 = intArray57.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        int int54 = util23.findMinSubArrayLen(0, intArray52);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util23.removeDuplicateElements(intArray62);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        util71.getNextPermutationNumber(intArray79);
        int[] intArray89 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int91 = util71.threeSumClosest(intArray89, 0);
        int int92 = util67.removeDuplicateElements(intArray89);
        int[] intArray94 = new int[] { (byte) 10 };
        int int96 = util67.threeSumClosest(intArray94, 7);
        int int97 = util23.findMinSubArrayLen(4, intArray94);
        int int99 = util0.threeSumClosest(intArray94, 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 7 + "'", int92 == 7);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        util1.getNextPermutationNumber(intArray33);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        int int52 = util1.findKthLargestViaQuickSort(intArray47, 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util1.getNextPermutationNumber(intArray66);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int int90 = util69.findKthLargestViaQuickSort(intArray86, (int) (short) 1);
        int int91 = util1.removeDuplicateElements(intArray86);
        util0.getNextPermutationNumber(intArray86);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        util27.getNextPermutationNumber(intArray62);
        int int65 = util12.removeDuplicateElements(intArray62);
        int int67 = util0.findKthLargestViaQuickSort(intArray62, (int) (short) 100);
        Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int int55 = util38.threeSumClosest(intArray50, (int) (short) 100);
        int[] intArray60 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int62 = util38.findKthLargestViaQuickSort(intArray60, 100);
        int int63 = util0.findMinViaIteration(intArray60);
        Class<?> wildcardClass64 = intArray60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util0.findMinSubArrayLen((int) (byte) 10, intArray68);
        Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Class<?> wildcardClass26 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        int int60 = util0.removeDuplicateElements(intArray55);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        int int92 = util61.findMinSubArrayLen(0, intArray90);
        int int93 = util0.findMinViaIteration(intArray90);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        Util util89 = new Util();
        int[] intArray91 = null;
        int int92 = util89.findMinSubArrayLen((int) '4', intArray91);
        int[] intArray96 = new int[] { (byte) 10, '#', (-1) };
        int int98 = util89.findKthLargestViaQuickSort(intArray96, (int) (byte) 1);
        int int99 = util0.findMinViaIteration(intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 35 + "'", int98 == 35);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int27 = util12.findMinSubArrayLen((int) '#', intArray24);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int50 = util29.findKthLargestViaQuickSort(intArray46, (int) (short) 1);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        util29.getNextPermutationNumber(intArray64);
        int int67 = util28.findMinViaIteration(intArray64);
        int int69 = util12.threeSumClosest(intArray64, (int) (byte) 10);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int85 = util70.findMinSubArrayLen((int) '#', intArray82);
        int int87 = util12.findKthLargestViaQuickSort(intArray82, (-1));
        int int89 = util0.findKthLargestViaQuickSort(intArray82, (-1));
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util58.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util0.threeSumClosest(intArray70, (int) (short) 1);
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int92 = util71.findKthLargestViaQuickSort(intArray88, (int) (short) 1);
        util56.getNextPermutationNumber(intArray88);
        int int95 = util44.threeSumClosest(intArray88, 100);
        int int97 = util0.findKthLargestViaQuickSort(intArray88, (int) (byte) 10);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Class<?> wildcardClass52 = intArray44.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        int[] intArray66 = null;
        int int67 = util21.findMinSubArrayLen(1, intArray66);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util21.threeSumClosest(intArray75, (int) (byte) -1);
        util0.getNextPermutationNumber(intArray75);
        int[] intArray81 = null;
        int int83 = util0.findKthLargestViaQuickSort(intArray81, (int) 'a');
        Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        int int77 = util0.findKthLargestViaQuickSort(intArray70, (int) (byte) 100);
        Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int71 = util56.findMinSubArrayLen((int) '#', intArray68);
        util52.getNextPermutationNumber(intArray68);
        int[] intArray73 = null;
        util52.getNextPermutationNumber(intArray73);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) ' ', intArray78);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int[] intArray94 = new int[] { (short) -1, 10, '4' };
        util81.getNextPermutationNumber(intArray94);
        int int96 = util76.findMinSubArrayLen((int) '#', intArray94);
        int int97 = util52.findMinSubArrayLen((int) 'a', intArray94);
        int int99 = util0.findKthLargestViaQuickSort(intArray94, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util56.removeDuplicateElements(intArray78);
        int int83 = util44.threeSumClosest(intArray78, 0);
        util0.getNextPermutationNumber(intArray78);
        Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int int41 = util20.findKthLargestViaQuickSort(intArray37, (int) (short) 1);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        util20.getNextPermutationNumber(intArray55);
        int int58 = util5.removeDuplicateElements(intArray55);
        int int60 = util4.threeSumClosest(intArray55, (int) (short) 0);
        util0.getNextPermutationNumber(intArray55);
        Class<?> wildcardClass62 = intArray55.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        util48.getNextPermutationNumber(intArray83);
        int int86 = util47.removeDuplicateElements(intArray83);
        int int88 = util0.findKthLargestViaQuickSort(intArray83, (int) ' ');
        Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        util48.getNextPermutationNumber(intArray83);
        int int86 = util47.removeDuplicateElements(intArray83);
        int int88 = util0.findKthLargestViaQuickSort(intArray83, (int) ' ');
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        util38.getNextPermutationNumber(intArray73);
        int int77 = util0.threeSumClosest(intArray73, (int) ' ');
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util78.getNextPermutationNumber(intArray86);
        int int90 = util0.removeDuplicateElements(intArray86);
        Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int[] intArray41 = new int[] { (short) -1, 10, '4' };
        util28.getNextPermutationNumber(intArray41);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int64 = util43.findKthLargestViaQuickSort(intArray60, (int) (short) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int[] intArray78 = new int[] { (short) -1, 10, '4' };
        util65.getNextPermutationNumber(intArray78);
        util43.getNextPermutationNumber(intArray78);
        int int81 = util28.removeDuplicateElements(intArray78);
        int int83 = util16.findKthLargestViaQuickSort(intArray78, (int) (short) 100);
        int int84 = util12.findMinViaIteration(intArray78);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util12.findMinViaIteration(intArray92);
        int int97 = util0.threeSumClosest(intArray92, (int) (short) -1);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Util util6 = new Util();
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        util6.getNextPermutationNumber(intArray14);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) -1, 10, '4' };
        util18.getNextPermutationNumber(intArray31);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util33.findKthLargestViaQuickSort(intArray50, (int) (short) 1);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) -1, 10, '4' };
        util55.getNextPermutationNumber(intArray68);
        util33.getNextPermutationNumber(intArray68);
        int int71 = util18.removeDuplicateElements(intArray68);
        int int73 = util6.findKthLargestViaQuickSort(intArray68, (int) (short) 100);
        util0.getNextPermutationNumber(intArray68);
        Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Class<?> wildcardClass40 = intArray34.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        int int60 = util0.removeDuplicateElements(intArray55);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        util65.getNextPermutationNumber(intArray73);
        int[] intArray83 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int85 = util65.threeSumClosest(intArray83, 0);
        int int86 = util61.removeDuplicateElements(intArray83);
        int int88 = util0.findKthLargestViaQuickSort(intArray83, (int) (short) 100);
        int[] intArray90 = null;
        int int91 = util0.findMinSubArrayLen((int) (short) 10, intArray90);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7 + "'", int86 == 7);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        Class<?> wildcardClass35 = intArray30.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray33);
        Class<?> wildcardClass37 = intArray33.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util47.findMinSubArrayLen((int) '#', intArray59);
        util43.getNextPermutationNumber(intArray59);
        int int65 = util0.findKthLargestViaQuickSort(intArray59, (-1));
        Class<?> wildcardClass66 = intArray59.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        util1.getNextPermutationNumber(intArray33);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        int int52 = util1.findKthLargestViaQuickSort(intArray47, 1);
        util0.getNextPermutationNumber(intArray47);
        Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Class<?> wildcardClass58 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        util0.getNextPermutationNumber(intArray65);
        Class<?> wildcardClass68 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 52, -1]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util46.findKthLargestViaQuickSort(intArray63, (int) (short) 1);
        int int69 = util0.threeSumClosest(intArray63, 0);
        Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int[] intArray91 = new int[] { (short) -1, 10, '4' };
        util78.getNextPermutationNumber(intArray91);
        util56.getNextPermutationNumber(intArray91);
        int int94 = util41.removeDuplicateElements(intArray91);
        int int96 = util40.threeSumClosest(intArray91, (int) (short) 0);
        int int98 = util0.findKthLargestViaQuickSort(intArray91, (int) '#');
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray51);
        Class<?> wildcardClass55 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) ' ', intArray12);
        Util util14 = new Util();
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        util14.getNextPermutationNumber(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int62 = util41.findKthLargestViaQuickSort(intArray58, (int) (short) 1);
        util26.getNextPermutationNumber(intArray58);
        int int65 = util14.threeSumClosest(intArray58, 100);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int int83 = util66.threeSumClosest(intArray78, (int) (short) 100);
        int int84 = util14.findMinViaIteration(intArray78);
        int int85 = util10.findMinViaIteration(intArray78);
        int int87 = util0.findKthLargestViaQuickSort(intArray78, (int) (short) -1);
        Class<?> wildcardClass88 = intArray78.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int41 = util26.findMinSubArrayLen((int) '#', intArray38);
        util22.getNextPermutationNumber(intArray38);
        int int43 = util0.removeDuplicateElements(intArray38);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        int int85 = util54.findMinSubArrayLen(0, intArray83);
        int int87 = util44.findKthLargestViaQuickSort(intArray83, 1);
        int int89 = util0.threeSumClosest(intArray83, (int) (short) 0);
        Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 52 + "'", int87 == 52);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        int[] intArray71 = null;
        int int72 = util0.removeDuplicateElements(intArray71);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray80);
        int[] intArray85 = null;
        int int86 = util0.findMinSubArrayLen((int) (short) 10, intArray85);
        Class<?> wildcardClass87 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Class<?> wildcardClass24 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        Class<?> wildcardClass73 = intArray66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Class<?> wildcardClass16 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        int int24 = util0.threeSumClosest(intArray22, (int) (byte) 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int[] intArray48 = new int[] { (short) -1, 10, '4' };
        util35.getNextPermutationNumber(intArray48);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util50.findKthLargestViaQuickSort(intArray67, (int) (short) 1);
        util35.getNextPermutationNumber(intArray67);
        int int74 = util25.findKthLargestViaQuickSort(intArray67, (int) (short) 10);
        int int76 = util0.findKthLargestViaQuickSort(intArray67, 10);
        Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.removeDuplicateElements(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        util0.getNextPermutationNumber(intArray58);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int[] intArray75 = new int[] { (short) -1, 10, '4' };
        util62.getNextPermutationNumber(intArray75);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util0.threeSumClosest(intArray84, 0);
        Class<?> wildcardClass90 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray4 = null;
        int int5 = util2.findMinSubArrayLen((int) '4', intArray4);
        int[] intArray9 = new int[] { (byte) 10, '#', (-1) };
        int int11 = util2.findKthLargestViaQuickSort(intArray9, (int) (byte) 1);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int int23 = util2.findKthLargestViaQuickSort(intArray19, (int) (short) 1);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        util2.getNextPermutationNumber(intArray37);
        int int40 = util1.removeDuplicateElements(intArray37);
        int int42 = util0.findKthLargestViaQuickSort(intArray37, 52);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, (int) (short) 100);
        int[] intArray46 = null;
        util0.getNextPermutationNumber(intArray46);
        Class<?> wildcardClass48 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Class<?> wildcardClass24 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        util50.getNextPermutationNumber(intArray58);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int[] intArray75 = new int[] { (short) -1, 10, '4' };
        util62.getNextPermutationNumber(intArray75);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util50.threeSumClosest(intArray84, 0);
        int int90 = util0.findMinViaIteration(intArray84);
        Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int83 = util62.findKthLargestViaQuickSort(intArray79, (int) (short) 1);
        util47.getNextPermutationNumber(intArray79);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int96 = util47.threeSumClosest(intArray92, (-1));
        int int98 = util0.threeSumClosest(intArray92, 0);
        Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int32 = util0.findMinSubArrayLen((int) (short) 1, intArray29);
        Class<?> wildcardClass33 = intArray29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, 100);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int80 = util46.findMinSubArrayLen(52, intArray76);
        int int82 = util0.findKthLargestViaQuickSort(intArray76, (int) '4');
        Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Util util6 = new Util();
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        util6.getNextPermutationNumber(intArray14);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) -1, 10, '4' };
        util18.getNextPermutationNumber(intArray31);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util33.findKthLargestViaQuickSort(intArray50, (int) (short) 1);
        util18.getNextPermutationNumber(intArray50);
        int int57 = util6.threeSumClosest(intArray50, 100);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int75 = util58.threeSumClosest(intArray70, (int) (short) 100);
        int int76 = util6.findMinViaIteration(intArray70);
        int int78 = util0.findKthLargestViaQuickSort(intArray70, 7);
        Class<?> wildcardClass79 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.removeDuplicateElements(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        util0.getNextPermutationNumber(intArray58);
        Class<?> wildcardClass62 = intArray58.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int[] intArray41 = new int[] { (short) -1, 10, '4' };
        util28.getNextPermutationNumber(intArray41);
        int int43 = util12.findMinSubArrayLen(0, intArray41);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int81 = util60.findKthLargestViaQuickSort(intArray77, (int) (short) 1);
        util45.getNextPermutationNumber(intArray77);
        int int83 = util12.findMinSubArrayLen((int) (short) 10, intArray77);
        int int84 = util0.removeDuplicateElements(intArray77);
        Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.removeDuplicateElements(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        util0.getNextPermutationNumber(intArray58);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int[] intArray75 = new int[] { (short) -1, 10, '4' };
        util62.getNextPermutationNumber(intArray75);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util0.threeSumClosest(intArray84, 0);
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Class<?> wildcardClass21 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Class<?> wildcardClass55 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        util0.getNextPermutationNumber(intArray44);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util46.findMinSubArrayLen((int) (short) 1, intArray75);
        int int79 = util0.findMinViaIteration(intArray75);
        Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int int75 = util0.removeDuplicateElements(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray88 = null;
        int int89 = util86.findMinSubArrayLen((int) '4', intArray88);
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int int95 = util86.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int97 = util76.findKthLargestViaQuickSort(intArray93, (int) (short) 1);
        int int99 = util0.findKthLargestViaQuickSort(intArray93, 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 35 + "'", int97 == 35);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int[] intArray65 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int67 = util47.threeSumClosest(intArray65, 0);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        util69.getNextPermutationNumber(intArray77);
        int int81 = util47.findMinSubArrayLen(52, intArray77);
        int int82 = util0.findMinViaIteration(intArray77);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        util21.getNextPermutationNumber(intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        util48.getNextPermutationNumber(intArray83);
        int int86 = util33.removeDuplicateElements(intArray83);
        int int88 = util21.findKthLargestViaQuickSort(intArray83, (int) (short) 100);
        int int90 = util0.threeSumClosest(intArray83, (int) (short) 10);
        Class<?> wildcardClass91 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        int int39 = util0.threeSumClosest(intArray36, (int) (short) -1);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        int[] intArray57 = null;
        int int58 = util0.findMinViaIteration(intArray57);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        util59.getNextPermutationNumber(intArray67);
        int int71 = util0.findMinViaIteration(intArray67);
        Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        int[] intArray55 = new int[] { (byte) -1, 4, (short) -1 };
        int int57 = util0.threeSumClosest(intArray55, (-1));
        Class<?> wildcardClass58 = intArray55.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, -1, 4]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int[] intArray30 = new int[] { (short) -1, 10, '4' };
        util17.getNextPermutationNumber(intArray30);
        int int32 = util1.findMinSubArrayLen(0, intArray30);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        util33.getNextPermutationNumber(intArray41);
        int[] intArray51 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int53 = util33.threeSumClosest(intArray51, 0);
        int int55 = util1.findKthLargestViaQuickSort(intArray51, (int) (byte) 100);
        util0.getNextPermutationNumber(intArray51);
        Class<?> wildcardClass57 = intArray51.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int42 = util21.findKthLargestViaQuickSort(intArray38, (int) (short) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        util21.getNextPermutationNumber(intArray56);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        int int75 = util21.threeSumClosest(intArray72, (int) '4');
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        Util util81 = new Util();
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        util81.getNextPermutationNumber(intArray89);
        int int94 = util77.threeSumClosest(intArray89, (int) (short) 100);
        int int95 = util21.findMinSubArrayLen((int) (byte) 10, intArray89);
        int int97 = util0.threeSumClosest(intArray89, (int) (byte) 100);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        Util util75 = new Util();
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        util75.getNextPermutationNumber(intArray83);
        int[] intArray93 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int95 = util75.threeSumClosest(intArray93, 0);
        int int96 = util71.removeDuplicateElements(intArray93);
        util0.getNextPermutationNumber(intArray93);
        int[] intArray98 = null;
        util0.getNextPermutationNumber(intArray98);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Class<?> wildcardClass52 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util0.findMinViaIteration(intArray67);
        Class<?> wildcardClass70 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        util1.getNextPermutationNumber(intArray33);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        int int52 = util1.findKthLargestViaQuickSort(intArray47, 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util1.getNextPermutationNumber(intArray66);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int int90 = util69.findKthLargestViaQuickSort(intArray86, (int) (short) 1);
        int int91 = util1.removeDuplicateElements(intArray86);
        util0.getNextPermutationNumber(intArray86);
        Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int[] intArray61 = new int[] { (short) -1, 10, '4' };
        util48.getNextPermutationNumber(intArray61);
        int int63 = util32.findMinSubArrayLen(0, intArray61);
        int int65 = util22.findKthLargestViaQuickSort(intArray61, 1);
        int[] intArray67 = null;
        int int68 = util22.findMinSubArrayLen(1, intArray67);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util22.threeSumClosest(intArray76, (int) (byte) -1);
        int int82 = util0.threeSumClosest(intArray76, (int) (short) 10);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        int int60 = util0.removeDuplicateElements(intArray55);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        util65.getNextPermutationNumber(intArray73);
        int[] intArray83 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int85 = util65.threeSumClosest(intArray83, 0);
        int int86 = util61.removeDuplicateElements(intArray83);
        int int88 = util0.findKthLargestViaQuickSort(intArray83, (int) (short) 100);
        Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 7 + "'", int86 == 7);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int[] intArray65 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int67 = util47.threeSumClosest(intArray65, 0);
        Util util69 = new Util();
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        util69.getNextPermutationNumber(intArray77);
        int int81 = util47.findMinSubArrayLen(52, intArray77);
        int int82 = util0.findMinViaIteration(intArray77);
        Class<?> wildcardClass83 = intArray77.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util21.removeDuplicateElements(intArray76);
        int int82 = util0.findMinViaIteration(intArray76);
        int[] intArray83 = null;
        int int85 = util0.findKthLargestViaQuickSort(intArray83, (int) '#');
        Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int[] intArray33 = new int[] { (short) -1, 10, '4' };
        util20.getNextPermutationNumber(intArray33);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int[] intArray49 = new int[] { (short) -1, 10, '4' };
        util36.getNextPermutationNumber(intArray49);
        int int51 = util20.findMinSubArrayLen(0, intArray49);
        int int53 = util10.findKthLargestViaQuickSort(intArray49, 1);
        int[] intArray55 = null;
        int int56 = util10.findMinSubArrayLen(1, intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int int69 = util10.findMinViaIteration(intArray65);
        int int70 = util0.findMinViaIteration(intArray65);
        int[] intArray71 = new int[] {};
        int int72 = util0.removeDuplicateElements(intArray71);
        Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util50.findKthLargestViaQuickSort(intArray67, (int) (short) 1);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int[] intArray85 = new int[] { (short) -1, 10, '4' };
        util72.getNextPermutationNumber(intArray85);
        util50.getNextPermutationNumber(intArray85);
        int int89 = util0.threeSumClosest(intArray85, 10);
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        int[] intArray21 = null;
        int int22 = util19.findMinSubArrayLen((int) '4', intArray21);
        int[] intArray26 = new int[] { (byte) 10, '#', (-1) };
        int int28 = util19.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int40 = util19.findKthLargestViaQuickSort(intArray36, (int) (short) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        util19.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int[] intArray79 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int81 = util61.threeSumClosest(intArray79, 0);
        int int82 = util57.removeDuplicateElements(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int int86 = util57.threeSumClosest(intArray84, 7);
        util19.getNextPermutationNumber(intArray84);
        int int89 = util0.findKthLargestViaQuickSort(intArray84, (int) (short) -1);
        Class<?> wildcardClass90 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util0.removeDuplicateElements(intArray46);
        Class<?> wildcardClass51 = intArray46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util21.threeSumClosest(intArray66, (-1));
        int int71 = util0.removeDuplicateElements(intArray66);
        Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        util41.getNextPermutationNumber(intArray73);
        int int80 = util31.findKthLargestViaQuickSort(intArray73, (int) (short) 10);
        util16.getNextPermutationNumber(intArray73);
        int int82 = util0.removeDuplicateElements(intArray73);
        Class<?> wildcardClass83 = intArray73.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        int[] intArray34 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int36 = util16.threeSumClosest(intArray34, 0);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util16.findMinSubArrayLen(52, intArray46);
        int[] intArray55 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int57 = util16.threeSumClosest(intArray55, (-1));
        util0.getNextPermutationNumber(intArray55);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        util59.getNextPermutationNumber(intArray67);
        int[] intArray77 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int79 = util59.threeSumClosest(intArray77, 0);
        util0.getNextPermutationNumber(intArray77);
        Class<?> wildcardClass81 = intArray77.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int[] intArray71 = new int[] { (short) -1, 10, '4' };
        util58.getNextPermutationNumber(intArray71);
        util36.getNextPermutationNumber(intArray71);
        int int74 = util21.removeDuplicateElements(intArray71);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        int int90 = util21.findMinViaIteration(intArray88);
        int int92 = util0.findKthLargestViaQuickSort(intArray88, (int) 'a');
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        int[] intArray38 = new int[] { (short) 0, (byte) 100, '#', 0, (byte) 0, 5 };
        util0.getNextPermutationNumber(intArray38);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 100, 35, 0, 5, 0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray33);
        Class<?> wildcardClass37 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util51.findKthLargestViaQuickSort(intArray68, (int) (short) 1);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int[] intArray86 = new int[] { (short) -1, 10, '4' };
        util73.getNextPermutationNumber(intArray86);
        util51.getNextPermutationNumber(intArray86);
        int int89 = util50.removeDuplicateElements(intArray86);
        int int91 = util40.findKthLargestViaQuickSort(intArray86, (int) (byte) 0);
        int int92 = util0.findMinViaIteration(intArray86);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int41 = util26.findMinSubArrayLen((int) '#', intArray38);
        util22.getNextPermutationNumber(intArray38);
        int int43 = util0.removeDuplicateElements(intArray38);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util55.findKthLargestViaQuickSort(intArray72, (int) (short) 1);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        util55.getNextPermutationNumber(intArray90);
        int int93 = util54.removeDuplicateElements(intArray90);
        int int95 = util44.findKthLargestViaQuickSort(intArray90, (int) (byte) 0);
        int int96 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        int[] intArray89 = null;
        int int91 = util0.findKthLargestViaQuickSort(intArray89, (-1));
        int[] intArray93 = null;
        int int94 = util0.findMinSubArrayLen(35, intArray93);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        int int76 = util45.findMinSubArrayLen(0, intArray74);
        int int78 = util35.findKthLargestViaQuickSort(intArray74, 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util35.getNextPermutationNumber(intArray86);
        int int91 = util0.threeSumClosest(intArray86, (int) (short) 10);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        int int67 = util0.removeDuplicateElements(intArray64);
        Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.removeDuplicateElements(intArray29);
        Class<?> wildcardClass32 = intArray29.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        int[] intArray71 = null;
        int int72 = util0.removeDuplicateElements(intArray71);
        int[] intArray73 = null;
        int int75 = util0.findKthLargestViaQuickSort(intArray73, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        Util util86 = new Util();
        int[] intArray88 = null;
        int int89 = util86.findMinSubArrayLen((int) '4', intArray88);
        int[] intArray93 = new int[] { (byte) 10, '#', (-1) };
        int int95 = util86.findKthLargestViaQuickSort(intArray93, (int) (byte) 1);
        int int97 = util76.threeSumClosest(intArray93, (int) '4');
        int int99 = util0.findKthLargestViaQuickSort(intArray93, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int73 = util58.findMinSubArrayLen((int) '#', intArray70);
        int int75 = util0.findKthLargestViaQuickSort(intArray70, (-1));
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int75 = util54.findKthLargestViaQuickSort(intArray71, (int) (short) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        util54.getNextPermutationNumber(intArray89);
        int int92 = util53.removeDuplicateElements(intArray89);
        int int94 = util52.findKthLargestViaQuickSort(intArray89, 52);
        int int95 = util0.removeDuplicateElements(intArray89);
        Class<?> wildcardClass96 = intArray89.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        Util util13 = new Util();
        int[] intArray15 = null;
        int int16 = util13.findMinSubArrayLen((int) '4', intArray15);
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int int22 = util13.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        util12.getNextPermutationNumber(intArray20);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        util24.getNextPermutationNumber(intArray56);
        int int63 = util12.threeSumClosest(intArray56, 100);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int81 = util64.threeSumClosest(intArray76, (int) (short) 100);
        int int82 = util12.findMinViaIteration(intArray76);
        util0.getNextPermutationNumber(intArray76);
        Class<?> wildcardClass84 = intArray76.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        int int65 = util34.findMinSubArrayLen(0, intArray63);
        int int67 = util24.findKthLargestViaQuickSort(intArray63, 1);
        int int68 = util0.findMinViaIteration(intArray63);
        Class<?> wildcardClass69 = intArray63.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util28.findKthLargestViaQuickSort(intArray45, (int) (short) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        util28.getNextPermutationNumber(intArray63);
        int int66 = util27.removeDuplicateElements(intArray63);
        int int68 = util26.findKthLargestViaQuickSort(intArray63, 52);
        int int70 = util0.threeSumClosest(intArray63, 7);
        Class<?> wildcardClass71 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util30.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        util30.getNextPermutationNumber(intArray63);
        int[] intArray69 = new int[] { 1, (short) 1 };
        int int71 = util30.threeSumClosest(intArray69, (int) '4');
        util0.getNextPermutationNumber(intArray69);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util73.findKthLargestViaQuickSort(intArray90, (int) (short) 1);
        int int96 = util0.threeSumClosest(intArray90, (int) (byte) 0);
        int[] intArray97 = null;
        int int99 = util0.findKthLargestViaQuickSort(intArray97, (int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int92 = util71.findKthLargestViaQuickSort(intArray88, (int) (short) 1);
        util56.getNextPermutationNumber(intArray88);
        int int95 = util44.threeSumClosest(intArray88, 100);
        int int97 = util0.findKthLargestViaQuickSort(intArray88, (int) (byte) 10);
        int[] intArray98 = null;
        util0.getNextPermutationNumber(intArray98);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        int int77 = util0.findKthLargestViaQuickSort(intArray70, (int) (byte) 100);
        Class<?> wildcardClass78 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int[] intArray66 = new int[] { (short) -1, 10, '4' };
        util53.getNextPermutationNumber(intArray66);
        util31.getNextPermutationNumber(intArray66);
        int int69 = util16.removeDuplicateElements(intArray66);
        int int71 = util4.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        int int72 = util0.findMinViaIteration(intArray66);
        int[] intArray73 = null;
        int int75 = util0.findKthLargestViaQuickSort(intArray73, (int) ' ');
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util21.removeDuplicateElements(intArray76);
        int int82 = util0.findMinViaIteration(intArray76);
        int[] intArray83 = null;
        int int85 = util0.findKthLargestViaQuickSort(intArray83, (int) (byte) 100);
        Class<?> wildcardClass86 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        int int39 = util0.removeDuplicateElements(intArray35);
        int[] intArray46 = new int[] { 35, 10, ' ', 5, (-1), (byte) 10 };
        int int47 = util0.findMinViaIteration(intArray46);
        Class<?> wildcardClass48 = intArray46.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35, 10, 32, 5, -1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        util25.getNextPermutationNumber(intArray57);
        int int64 = util15.findKthLargestViaQuickSort(intArray57, (int) (short) 10);
        util0.getNextPermutationNumber(intArray57);
        Class<?> wildcardClass66 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        int int57 = util26.findMinSubArrayLen(0, intArray55);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        Util util84 = new Util();
        int[] intArray86 = null;
        int int87 = util84.findMinSubArrayLen((int) '4', intArray86);
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int int93 = util84.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int95 = util74.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        util59.getNextPermutationNumber(intArray91);
        int int97 = util26.findMinSubArrayLen((int) (short) 10, intArray91);
        int int98 = util0.removeDuplicateElements(intArray91);
        Class<?> wildcardClass99 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 35 + "'", int95 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int66 = util45.findKthLargestViaQuickSort(intArray62, (int) (short) 1);
        util30.getNextPermutationNumber(intArray62);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        util72.getNextPermutationNumber(intArray80);
        int[] intArray90 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int92 = util72.threeSumClosest(intArray90, 0);
        int int93 = util68.removeDuplicateElements(intArray90);
        int int95 = util30.threeSumClosest(intArray90, 0);
        int int96 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 7 + "'", int93 == 7);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int61 = util40.findKthLargestViaQuickSort(intArray57, (int) (short) 1);
        int int63 = util0.findKthLargestViaQuickSort(intArray57, 5);
        Class<?> wildcardClass64 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int[] intArray79 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int81 = util61.threeSumClosest(intArray79, 0);
        int int82 = util57.removeDuplicateElements(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int int86 = util57.threeSumClosest(intArray84, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = util0.findMinViaIteration(intArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        int int39 = util0.removeDuplicateElements(intArray35);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int[] intArray79 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int81 = util40.threeSumClosest(intArray79, (-1));
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        Util util87 = new Util();
        int[] intArray89 = null;
        int int90 = util87.findMinSubArrayLen((int) '4', intArray89);
        int[] intArray94 = new int[] { (byte) 10, '#', (-1) };
        int int96 = util87.findKthLargestViaQuickSort(intArray94, (int) (byte) 1);
        int int97 = util82.findMinSubArrayLen((int) '#', intArray94);
        int int98 = util40.removeDuplicateElements(intArray94);
        util0.getNextPermutationNumber(intArray94);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 35 + "'", int96 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        util33.getNextPermutationNumber(intArray65);
        int int71 = util0.findMinSubArrayLen((int) (short) 10, intArray65);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int91 = util76.findMinSubArrayLen((int) '#', intArray88);
        util72.getNextPermutationNumber(intArray88);
        int int94 = util0.findKthLargestViaQuickSort(intArray88, (int) (byte) 10);
        Class<?> wildcardClass95 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int[] intArray65 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int67 = util47.threeSumClosest(intArray65, 0);
        int int68 = util0.findMinViaIteration(intArray65);
        Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int88 = util0.removeDuplicateElements(intArray83);
        int[] intArray89 = null;
        int int91 = util0.findKthLargestViaQuickSort(intArray89, (-1));
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        util38.getNextPermutationNumber(intArray73);
        int int77 = util0.threeSumClosest(intArray73, (int) ' ');
        Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int26 = util5.findKthLargestViaQuickSort(intArray22, (int) (short) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int[] intArray40 = new int[] { (short) -1, 10, '4' };
        util27.getNextPermutationNumber(intArray40);
        util5.getNextPermutationNumber(intArray40);
        int int43 = util4.findMinViaIteration(intArray40);
        util0.getNextPermutationNumber(intArray40);
        Class<?> wildcardClass45 = intArray40.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int[] intArray41 = new int[] { (short) -1, 10, '4' };
        util28.getNextPermutationNumber(intArray41);
        int int43 = util12.findMinSubArrayLen(0, intArray41);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int81 = util60.findKthLargestViaQuickSort(intArray77, (int) (short) 1);
        util45.getNextPermutationNumber(intArray77);
        int int83 = util12.findMinSubArrayLen((int) (short) 10, intArray77);
        int int84 = util0.removeDuplicateElements(intArray77);
        Class<?> wildcardClass85 = intArray77.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        int int92 = util0.findKthLargestViaQuickSort(intArray89, (int) (short) 10);
        int[] intArray93 = null;
        int int95 = util0.threeSumClosest(intArray93, (int) (byte) 0);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int85 = util64.findKthLargestViaQuickSort(intArray81, (int) (short) 1);
        util49.getNextPermutationNumber(intArray81);
        int int88 = util39.findKthLargestViaQuickSort(intArray81, (int) (short) 10);
        util24.getNextPermutationNumber(intArray81);
        int int91 = util0.threeSumClosest(intArray81, (int) (byte) 10);
        int[] intArray92 = null;
        int int93 = util0.findMinViaIteration(intArray92);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        util0.getNextPermutationNumber(intArray44);
        Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        util5.getNextPermutationNumber(intArray13);
        int[] intArray23 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int25 = util5.threeSumClosest(intArray23, 0);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int62 = util41.findKthLargestViaQuickSort(intArray58, (int) (short) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int[] intArray76 = new int[] { (short) -1, 10, '4' };
        util63.getNextPermutationNumber(intArray76);
        util41.getNextPermutationNumber(intArray76);
        int int79 = util26.removeDuplicateElements(intArray76);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int[] intArray93 = new int[] { (short) -1, 10, '4' };
        util80.getNextPermutationNumber(intArray93);
        int int95 = util26.findMinViaIteration(intArray93);
        int int97 = util5.findKthLargestViaQuickSort(intArray93, (int) 'a');
        int int98 = util0.findMinSubArrayLen((int) (short) 100, intArray93);
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util38.findMinSubArrayLen(0, intArray67);
        util0.getNextPermutationNumber(intArray67);
        Class<?> wildcardClass71 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray22 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int24 = util0.findKthLargestViaQuickSort(intArray22, 100);
        Class<?> wildcardClass25 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int77 = util62.findMinSubArrayLen((int) '#', intArray74);
        util58.getNextPermutationNumber(intArray74);
        int int79 = util0.findMinSubArrayLen((int) (byte) 1, intArray74);
        int[] intArray80 = null;
        int int81 = util0.removeDuplicateElements(intArray80);
        Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util30.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        util30.getNextPermutationNumber(intArray63);
        int[] intArray69 = new int[] { 1, (short) 1 };
        int int71 = util30.threeSumClosest(intArray69, (int) '4');
        util0.getNextPermutationNumber(intArray69);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util73.findKthLargestViaQuickSort(intArray90, (int) (short) 1);
        int int96 = util0.threeSumClosest(intArray90, (int) (byte) 0);
        Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray22 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int24 = util0.findKthLargestViaQuickSort(intArray22, 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        int int56 = util25.findMinSubArrayLen(0, intArray54);
        int int58 = util0.threeSumClosest(intArray54, (-1));
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int[] intArray78 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int80 = util60.threeSumClosest(intArray78, 0);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        util82.getNextPermutationNumber(intArray90);
        int int94 = util60.findMinSubArrayLen(52, intArray90);
        int int95 = util0.findMinSubArrayLen((int) (short) 0, intArray90);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int[] intArray53 = new int[] { (short) -1, 10, '4' };
        util40.getNextPermutationNumber(intArray53);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util55.findKthLargestViaQuickSort(intArray72, (int) (short) 1);
        util40.getNextPermutationNumber(intArray72);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int89 = util40.threeSumClosest(intArray85, (-1));
        int int91 = util0.findKthLargestViaQuickSort(intArray85, (int) '4');
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int57 = util36.findKthLargestViaQuickSort(intArray53, (int) (short) 1);
        util21.getNextPermutationNumber(intArray53);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util21.removeDuplicateElements(intArray76);
        int int82 = util0.findMinViaIteration(intArray76);
        int[] intArray83 = null;
        int int85 = util0.findKthLargestViaQuickSort(intArray83, (int) '#');
        int[] intArray86 = null;
        int int87 = util0.findMinViaIteration(intArray86);
        Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        int int92 = util0.findKthLargestViaQuickSort(intArray89, (int) (short) 10);
        int[] intArray93 = null;
        int int95 = util0.threeSumClosest(intArray93, (int) (byte) 0);
        int[] intArray96 = null;
        int int98 = util0.threeSumClosest(intArray96, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Class<?> wildcardClass30 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        int int39 = util0.threeSumClosest(intArray36, (int) (short) -1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util40.findMinSubArrayLen((int) '#', intArray52);
        int int56 = util0.findMinViaIteration(intArray52);
        Class<?> wildcardClass57 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util0.findMinSubArrayLen((int) 'a', intArray40);
        Class<?> wildcardClass44 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Class<?> wildcardClass6 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int32 = util0.findMinSubArrayLen((int) (short) 1, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util33.findMinSubArrayLen((int) '#', intArray45);
        int[] intArray49 = null;
        int int51 = util33.findKthLargestViaQuickSort(intArray49, 4);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        util52.getNextPermutationNumber(intArray60);
        int[] intArray70 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int72 = util52.threeSumClosest(intArray70, 0);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int84 = util52.findMinSubArrayLen((int) (short) 1, intArray81);
        int int86 = util33.threeSumClosest(intArray81, 7);
        int int88 = util0.findKthLargestViaQuickSort(intArray81, 100);
        Class<?> wildcardClass89 = intArray81.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        util39.getNextPermutationNumber(intArray74);
        int int77 = util38.removeDuplicateElements(intArray74);
        int int79 = util0.findKthLargestViaQuickSort(intArray74, 4);
        Class<?> wildcardClass80 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        util50.getNextPermutationNumber(intArray58);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int[] intArray75 = new int[] { (short) -1, 10, '4' };
        util62.getNextPermutationNumber(intArray75);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util50.threeSumClosest(intArray84, 0);
        int int90 = util0.findMinViaIteration(intArray84);
        Class<?> wildcardClass91 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        int[] intArray34 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int36 = util16.threeSumClosest(intArray34, 0);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util16.findMinSubArrayLen(52, intArray46);
        int[] intArray55 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int57 = util16.threeSumClosest(intArray55, (-1));
        util0.getNextPermutationNumber(intArray55);
        Class<?> wildcardClass59 = intArray55.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Class<?> wildcardClass76 = intArray66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util0.findMinSubArrayLen((int) 'a', intArray40);
        Class<?> wildcardClass44 = intArray40.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util51.findKthLargestViaQuickSort(intArray68, (int) (short) 1);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int[] intArray86 = new int[] { (short) -1, 10, '4' };
        util73.getNextPermutationNumber(intArray86);
        util51.getNextPermutationNumber(intArray86);
        int int89 = util50.removeDuplicateElements(intArray86);
        int int91 = util40.findKthLargestViaQuickSort(intArray86, (int) (byte) 0);
        int int92 = util0.findMinViaIteration(intArray86);
        Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        util27.getNextPermutationNumber(intArray35);
        int int40 = util23.threeSumClosest(intArray35, (int) (short) 100);
        int int41 = util0.findMinSubArrayLen(10, intArray35);
        Class<?> wildcardClass42 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Class<?> wildcardClass50 = intArray42.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.removeDuplicateElements(intArray29);
        Class<?> wildcardClass32 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Util util52 = new Util();
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int75 = util54.findKthLargestViaQuickSort(intArray71, (int) (short) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        util54.getNextPermutationNumber(intArray89);
        int int92 = util53.removeDuplicateElements(intArray89);
        int int94 = util52.findKthLargestViaQuickSort(intArray89, 52);
        util0.getNextPermutationNumber(intArray89);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray39 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int41 = util0.threeSumClosest(intArray39, (-1));
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util0.removeDuplicateElements(intArray54);
        Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int73 = util52.findKthLargestViaQuickSort(intArray69, (int) (short) 1);
        int int75 = util0.threeSumClosest(intArray69, (int) (byte) 0);
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        int[] intArray40 = null;
        int int42 = util0.findKthLargestViaQuickSort(intArray40, (int) (short) 100);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        int int74 = util43.findMinSubArrayLen(0, intArray72);
        int int75 = util0.findMinViaIteration(intArray72);
        Class<?> wildcardClass76 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int int75 = util0.removeDuplicateElements(intArray70);
        int[] intArray76 = null;
        int int78 = util0.findKthLargestViaQuickSort(intArray76, 1);
        int[] intArray79 = null;
        util0.getNextPermutationNumber(intArray79);
        Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int[] intArray60 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int62 = util42.threeSumClosest(intArray60, 0);
        int int63 = util38.removeDuplicateElements(intArray60);
        int int65 = util0.threeSumClosest(intArray60, 0);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int int83 = util66.threeSumClosest(intArray78, (int) (short) 100);
        int[] intArray88 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int90 = util66.findKthLargestViaQuickSort(intArray88, 100);
        int int92 = util0.threeSumClosest(intArray88, 10);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 35, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        int[] intArray66 = null;
        int int67 = util21.findMinSubArrayLen(1, intArray66);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util21.threeSumClosest(intArray75, (int) (byte) -1);
        util0.getNextPermutationNumber(intArray75);
        Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.removeDuplicateElements(intArray88);
        int int93 = util0.findKthLargestViaQuickSort(intArray88, 0);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util0.findMinSubArrayLen((int) (byte) 10, intArray68);
        int[] intArray75 = null;
        int int77 = util0.findKthLargestViaQuickSort(intArray75, (int) (byte) 0);
        Class<?> wildcardClass78 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        int[] intArray40 = null;
        int int42 = util0.findKthLargestViaQuickSort(intArray40, (int) (short) 100);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util43.removeDuplicateElements(intArray65);
        int int69 = util0.removeDuplicateElements(intArray65);
        Class<?> wildcardClass70 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int89 = util0.findKthLargestViaQuickSort(intArray83, 5);
        Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int int28 = util7.findKthLargestViaQuickSort(intArray24, (int) (short) 1);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int48 = util33.findMinSubArrayLen((int) '#', intArray45);
        util29.getNextPermutationNumber(intArray45);
        int int50 = util7.removeDuplicateElements(intArray45);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        int int92 = util61.findMinSubArrayLen(0, intArray90);
        int int94 = util51.findKthLargestViaQuickSort(intArray90, 1);
        int int96 = util7.threeSumClosest(intArray90, (int) (short) 0);
        int int97 = util0.findMinViaIteration(intArray90);
        int[] intArray98 = null;
        int int99 = util0.removeDuplicateElements(intArray98);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 52 + "'", int94 == 52);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util47.findKthLargestViaQuickSort(intArray64, (int) (short) 1);
        util32.getNextPermutationNumber(intArray64);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        util74.getNextPermutationNumber(intArray82);
        int[] intArray92 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int94 = util74.threeSumClosest(intArray92, 0);
        int int95 = util70.removeDuplicateElements(intArray92);
        int int97 = util32.threeSumClosest(intArray92, 0);
        int int98 = util22.removeDuplicateElements(intArray92);
        util0.getNextPermutationNumber(intArray92);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        int[] intArray11 = new int[] { (byte) 10, '#', (-1) };
        int int13 = util4.findKthLargestViaQuickSort(intArray11, (int) (byte) 1);
        int[] intArray17 = new int[] { (short) -1, 10, '4' };
        util4.getNextPermutationNumber(intArray17);
        Util util19 = new Util();
        int[] intArray21 = null;
        int int22 = util19.findMinSubArrayLen((int) '4', intArray21);
        int[] intArray26 = new int[] { (byte) 10, '#', (-1) };
        int int28 = util19.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int40 = util19.findKthLargestViaQuickSort(intArray36, (int) (short) 1);
        util4.getNextPermutationNumber(intArray36);
        int int42 = util0.removeDuplicateElements(intArray36);
        Class<?> wildcardClass43 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util10.threeSumClosest(intArray55, (-1));
        int int60 = util0.removeDuplicateElements(intArray55);
        Class<?> wildcardClass61 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        int int92 = util0.findKthLargestViaQuickSort(intArray89, (int) (short) 10);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        util48.getNextPermutationNumber(intArray83);
        int int86 = util47.findMinViaIteration(intArray83);
        int int87 = util0.findMinViaIteration(intArray83);
        Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        Class<?> wildcardClass26 = intArray22.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int[] intArray74 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int76 = util56.threeSumClosest(intArray74, 0);
        int int77 = util52.removeDuplicateElements(intArray74);
        int[] intArray79 = new int[] { (byte) 10 };
        int int81 = util52.threeSumClosest(intArray79, 7);
        int int82 = util0.removeDuplicateElements(intArray79);
        Class<?> wildcardClass83 = intArray79.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        int int39 = util0.threeSumClosest(intArray36, (int) (short) -1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util40.findMinSubArrayLen((int) '#', intArray52);
        int int56 = util0.findMinViaIteration(intArray52);
        Class<?> wildcardClass57 = intArray52.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int[] intArray33 = new int[] { (short) -1, 10, '4' };
        util20.getNextPermutationNumber(intArray33);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int[] intArray49 = new int[] { (short) -1, 10, '4' };
        util36.getNextPermutationNumber(intArray49);
        int int51 = util20.findMinSubArrayLen(0, intArray49);
        int int53 = util10.findKthLargestViaQuickSort(intArray49, 1);
        int[] intArray55 = null;
        int int56 = util10.findMinSubArrayLen(1, intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int int69 = util10.findMinViaIteration(intArray65);
        int int70 = util0.findMinViaIteration(intArray65);
        int[] intArray71 = new int[] {};
        int int72 = util0.removeDuplicateElements(intArray71);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int int89 = util74.findMinSubArrayLen((int) '#', intArray86);
        int int90 = util0.findMinSubArrayLen((int) (short) 10, intArray86);
        Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray22 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int24 = util0.findKthLargestViaQuickSort(intArray22, 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        int int56 = util25.findMinSubArrayLen(0, intArray54);
        int int58 = util0.threeSumClosest(intArray54, (-1));
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int[] intArray78 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int80 = util60.threeSumClosest(intArray78, 0);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        util82.getNextPermutationNumber(intArray90);
        int int94 = util60.findMinSubArrayLen(52, intArray90);
        int int95 = util0.findMinSubArrayLen((int) (short) 0, intArray90);
        Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, 100);
        Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util30.findMinSubArrayLen((int) '#', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int80 = util46.findMinSubArrayLen(52, intArray76);
        int[] intArray85 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int87 = util46.threeSumClosest(intArray85, (-1));
        util30.getNextPermutationNumber(intArray85);
        int int90 = util0.findKthLargestViaQuickSort(intArray85, 7);
        Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray22 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int24 = util0.findKthLargestViaQuickSort(intArray22, 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int[] intArray38 = new int[] { (short) -1, 10, '4' };
        util25.getNextPermutationNumber(intArray38);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        int int56 = util25.findMinSubArrayLen(0, intArray54);
        int int58 = util0.threeSumClosest(intArray54, (-1));
        Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        int int39 = util0.removeDuplicateElements(intArray35);
        int[] intArray46 = new int[] { 35, 10, ' ', 5, (-1), (byte) 10 };
        int int47 = util0.findMinViaIteration(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util52.findMinSubArrayLen((int) '#', intArray64);
        util48.getNextPermutationNumber(intArray64);
        int[] intArray69 = null;
        util48.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util71.findMinSubArrayLen((int) '#', intArray83);
        int int87 = util48.removeDuplicateElements(intArray83);
        int int88 = util0.findMinViaIteration(intArray83);
        int[] intArray90 = null;
        int int91 = util0.findMinSubArrayLen(4, intArray90);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[35, 10, 32, 5, -1, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util47.findMinSubArrayLen((int) '#', intArray59);
        util43.getNextPermutationNumber(intArray59);
        int int65 = util0.findKthLargestViaQuickSort(intArray59, (-1));
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int85 = util70.findMinSubArrayLen((int) '#', intArray82);
        util66.getNextPermutationNumber(intArray82);
        int int88 = util0.threeSumClosest(intArray82, 35);
        Class<?> wildcardClass89 = intArray82.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        int[] intArray55 = null;
        int int56 = util0.findMinSubArrayLen(1, intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int[] intArray75 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int77 = util57.threeSumClosest(intArray75, 0);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        util79.getNextPermutationNumber(intArray87);
        int int91 = util57.findMinSubArrayLen(52, intArray87);
        int[] intArray96 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int98 = util57.threeSumClosest(intArray96, (-1));
        int int99 = util0.removeDuplicateElements(intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 5 + "'", int99 == 5);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int[] intArray71 = new int[] { (short) -1, 10, '4' };
        util58.getNextPermutationNumber(intArray71);
        int int73 = util42.findMinSubArrayLen(0, intArray71);
        int int75 = util32.findKthLargestViaQuickSort(intArray71, 1);
        int[] intArray77 = null;
        int int78 = util32.findMinSubArrayLen(1, intArray77);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        util79.getNextPermutationNumber(intArray87);
        int int91 = util32.findMinViaIteration(intArray87);
        int int93 = util0.findKthLargestViaQuickSort(intArray87, 10);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int[] intArray89 = new int[] { (short) -1, 10, '4' };
        util76.getNextPermutationNumber(intArray89);
        int int92 = util0.findKthLargestViaQuickSort(intArray89, (int) (short) 10);
        int[] intArray93 = null;
        int int95 = util0.threeSumClosest(intArray93, (int) (byte) 0);
        int[] intArray96 = null;
        util0.getNextPermutationNumber(intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        int[] intArray21 = null;
        int int22 = util19.findMinSubArrayLen((int) '4', intArray21);
        int[] intArray26 = new int[] { (byte) 10, '#', (-1) };
        int int28 = util19.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int40 = util19.findKthLargestViaQuickSort(intArray36, (int) (short) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        util19.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        int int73 = util19.threeSumClosest(intArray70, (int) '4');
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        util79.getNextPermutationNumber(intArray87);
        int int92 = util75.threeSumClosest(intArray87, (int) (short) 100);
        int int93 = util19.findMinSubArrayLen((int) (byte) 10, intArray87);
        int int95 = util0.findKthLargestViaQuickSort(intArray87, 7);
        Class<?> wildcardClass96 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int27 = util6.findKthLargestViaQuickSort(intArray23, (int) (short) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        util28.getNextPermutationNumber(intArray36);
        int[] intArray46 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int48 = util28.threeSumClosest(intArray46, 0);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util28.findMinSubArrayLen((int) (short) 1, intArray57);
        util6.getNextPermutationNumber(intArray57);
        int int63 = util0.findKthLargestViaQuickSort(intArray57, 4);
        Class<?> wildcardClass64 = intArray57.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int44 = util23.findKthLargestViaQuickSort(intArray40, (int) (short) 1);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        util23.getNextPermutationNumber(intArray58);
        util22.getNextPermutationNumber(intArray58);
        int int62 = util0.removeDuplicateElements(intArray58);
        Class<?> wildcardClass63 = intArray58.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        util7.getNextPermutationNumber(intArray39);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util7.threeSumClosest(intArray52, (-1));
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int93 = util72.findKthLargestViaQuickSort(intArray89, (int) (short) 1);
        util57.getNextPermutationNumber(intArray89);
        int int95 = util7.removeDuplicateElements(intArray89);
        int int96 = util0.removeDuplicateElements(intArray89);
        int[] intArray97 = null;
        int int99 = util0.findKthLargestViaQuickSort(intArray97, 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util65.findKthLargestViaQuickSort(intArray82, (int) (short) 1);
        util50.getNextPermutationNumber(intArray82);
        int int89 = util38.threeSumClosest(intArray82, 100);
        int int91 = util16.findKthLargestViaQuickSort(intArray82, 1);
        util4.getNextPermutationNumber(intArray82);
        int int93 = util0.findMinViaIteration(intArray82);
        Class<?> wildcardClass94 = intArray82.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        util19.getNextPermutationNumber(intArray27);
        int[] intArray37 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int39 = util19.threeSumClosest(intArray37, 0);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util19.findMinSubArrayLen((int) (short) 1, intArray48);
        int int53 = util0.threeSumClosest(intArray48, 7);
        Util util55 = new Util();
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int[] intArray91 = new int[] { (short) -1, 10, '4' };
        util78.getNextPermutationNumber(intArray91);
        util56.getNextPermutationNumber(intArray91);
        int int94 = util55.findMinViaIteration(intArray91);
        int int95 = util0.findMinSubArrayLen(1, intArray91);
        Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int33 = util12.findKthLargestViaQuickSort(intArray29, (int) (short) 1);
        Util util34 = new Util();
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        util34.getNextPermutationNumber(intArray42);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int[] intArray59 = new int[] { (short) -1, 10, '4' };
        util46.getNextPermutationNumber(intArray59);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int82 = util61.findKthLargestViaQuickSort(intArray78, (int) (short) 1);
        util46.getNextPermutationNumber(intArray78);
        int int85 = util34.threeSumClosest(intArray78, 100);
        int int87 = util12.findKthLargestViaQuickSort(intArray78, 1);
        util0.getNextPermutationNumber(intArray78);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        int[] intArray57 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int59 = util39.threeSumClosest(intArray57, 0);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int int73 = util39.findMinSubArrayLen(52, intArray69);
        int[] intArray78 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int80 = util39.threeSumClosest(intArray78, (-1));
        util23.getNextPermutationNumber(intArray78);
        int int82 = util0.findMinViaIteration(intArray78);
        Class<?> wildcardClass83 = intArray78.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray35 = null;
        int int36 = util0.findMinViaIteration(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int53 = util38.findMinSubArrayLen((int) '#', intArray50);
        int int54 = util0.findMinSubArrayLen(52, intArray50);
        Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int int75 = util0.removeDuplicateElements(intArray70);
        Class<?> wildcardClass76 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        int int24 = util0.threeSumClosest(intArray22, (int) (byte) 100);
        Util util25 = new Util();
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        util25.getNextPermutationNumber(intArray33);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int62 = util37.removeDuplicateElements(intArray59);
        int int64 = util25.threeSumClosest(intArray59, 0);
        util0.getNextPermutationNumber(intArray59);
        int[] intArray66 = null;
        int int68 = util0.threeSumClosest(intArray66, (-1));
        Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4 + "'", int62 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        Class<?> wildcardClass18 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        util32.getNextPermutationNumber(intArray40);
        int[] intArray50 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int52 = util32.threeSumClosest(intArray50, 0);
        int int54 = util0.findKthLargestViaQuickSort(intArray50, (int) (byte) 100);
        Class<?> wildcardClass55 = intArray50.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        int int20 = util0.threeSumClosest(intArray18, 7);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util21.removeDuplicateElements(intArray43);
        int int47 = util0.findMinViaIteration(intArray43);
        Class<?> wildcardClass48 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        util38.getNextPermutationNumber(intArray73);
        int int77 = util0.threeSumClosest(intArray73, (int) ' ');
        Class<?> wildcardClass78 = intArray73.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int[] intArray41 = new int[] { (short) -1, 10, '4' };
        util28.getNextPermutationNumber(intArray41);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int64 = util43.findKthLargestViaQuickSort(intArray60, (int) (short) 1);
        util28.getNextPermutationNumber(intArray60);
        int int67 = util16.threeSumClosest(intArray60, 100);
        int int68 = util0.removeDuplicateElements(intArray60);
        Class<?> wildcardClass69 = intArray60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Class<?> wildcardClass55 = intArray51.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        int int24 = util0.threeSumClosest(intArray22, (int) (byte) 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int[] intArray48 = new int[] { (short) -1, 10, '4' };
        util35.getNextPermutationNumber(intArray48);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int71 = util50.findKthLargestViaQuickSort(intArray67, (int) (short) 1);
        util35.getNextPermutationNumber(intArray67);
        int int74 = util25.findKthLargestViaQuickSort(intArray67, (int) (short) 10);
        int int76 = util0.findKthLargestViaQuickSort(intArray67, 10);
        Class<?> wildcardClass77 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int85 = util64.findKthLargestViaQuickSort(intArray81, (int) (short) 1);
        util49.getNextPermutationNumber(intArray81);
        int int88 = util39.findKthLargestViaQuickSort(intArray81, (int) (short) 10);
        util24.getNextPermutationNumber(intArray81);
        int int91 = util0.threeSumClosest(intArray81, (int) (byte) 10);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int int51 = util30.findKthLargestViaQuickSort(intArray47, (int) (short) 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        util30.getNextPermutationNumber(intArray65);
        int int68 = util29.findMinViaIteration(intArray65);
        util25.getNextPermutationNumber(intArray65);
        int int70 = util0.findMinSubArrayLen((int) (short) -1, intArray65);
        Class<?> wildcardClass71 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        util52.getNextPermutationNumber(intArray60);
        int[] intArray70 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int72 = util52.threeSumClosest(intArray70, 0);
        int int73 = util48.removeDuplicateElements(intArray70);
        int int75 = util10.threeSumClosest(intArray70, 0);
        int int76 = util0.removeDuplicateElements(intArray70);
        Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 7 + "'", int73 == 7);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 7 + "'", int76 == 7);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        int int75 = util44.findMinSubArrayLen(0, intArray73);
        int int77 = util34.findKthLargestViaQuickSort(intArray73, 1);
        int[] intArray79 = null;
        int int80 = util34.findMinSubArrayLen(1, intArray79);
        Util util81 = new Util();
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        util81.getNextPermutationNumber(intArray89);
        int int93 = util34.findMinViaIteration(intArray89);
        int int94 = util24.findMinViaIteration(intArray89);
        int[] intArray95 = new int[] {};
        int int96 = util24.removeDuplicateElements(intArray95);
        int int97 = util0.findMinViaIteration(intArray95);
        Class<?> wildcardClass98 = intArray95.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int73 = util52.findKthLargestViaQuickSort(intArray69, (int) (short) 1);
        int int75 = util0.threeSumClosest(intArray69, (int) (byte) 0);
        Class<?> wildcardClass76 = intArray69.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int int55 = util38.threeSumClosest(intArray50, (int) (short) 100);
        int[] intArray60 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int62 = util38.findKthLargestViaQuickSort(intArray60, 100);
        int int63 = util0.findMinViaIteration(intArray60);
        Util util64 = new Util();
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        util64.getNextPermutationNumber(intArray72);
        util0.getNextPermutationNumber(intArray72);
        Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        int int52 = util21.findMinSubArrayLen(0, intArray50);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int63 = util21.removeDuplicateElements(intArray60);
        int int64 = util0.findMinViaIteration(intArray60);
        Class<?> wildcardClass65 = intArray60.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        int int39 = util0.threeSumClosest(intArray36, (int) (short) -1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util40.findMinSubArrayLen((int) '#', intArray52);
        int int56 = util0.findMinViaIteration(intArray52);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int[] intArray79 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int81 = util61.threeSumClosest(intArray79, 0);
        int int82 = util57.removeDuplicateElements(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int int86 = util57.threeSumClosest(intArray84, 7);
        int int88 = util0.findKthLargestViaQuickSort(intArray84, (int) '#');
        Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        util52.getNextPermutationNumber(intArray88);
        int int92 = util0.findMinViaIteration(intArray88);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int26 = util5.findKthLargestViaQuickSort(intArray22, (int) (short) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int[] intArray40 = new int[] { (short) -1, 10, '4' };
        util27.getNextPermutationNumber(intArray40);
        util5.getNextPermutationNumber(intArray40);
        int int43 = util4.findMinViaIteration(intArray40);
        util0.getNextPermutationNumber(intArray40);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int int67 = util46.threeSumClosest(intArray63, (int) '4');
        int int68 = util0.findMinSubArrayLen(1, intArray63);
        Class<?> wildcardClass69 = intArray63.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        util32.getNextPermutationNumber(intArray40);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        util44.getNextPermutationNumber(intArray76);
        int int83 = util32.threeSumClosest(intArray76, 100);
        int[] intArray87 = new int[] { (byte) -1, 4, (short) -1 };
        int int89 = util32.threeSumClosest(intArray87, (-1));
        int int90 = util0.removeDuplicateElements(intArray87);
        Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, -1, 4]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        int[] intArray34 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int36 = util16.threeSumClosest(intArray34, 0);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util16.findMinSubArrayLen(52, intArray46);
        int[] intArray55 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int57 = util16.threeSumClosest(intArray55, (-1));
        util0.getNextPermutationNumber(intArray55);
        Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        int[] intArray38 = null;
        int int39 = util0.findMinViaIteration(intArray38);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        util7.getNextPermutationNumber(intArray39);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util7.threeSumClosest(intArray52, (-1));
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int93 = util72.findKthLargestViaQuickSort(intArray89, (int) (short) 1);
        util57.getNextPermutationNumber(intArray89);
        int int95 = util7.removeDuplicateElements(intArray89);
        int int96 = util0.removeDuplicateElements(intArray89);
        int[] intArray97 = null;
        int int99 = util0.findKthLargestViaQuickSort(intArray97, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        int[] intArray55 = null;
        int int56 = util0.removeDuplicateElements(intArray55);
        Class<?> wildcardClass57 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        int int46 = util0.threeSumClosest(intArray44, 100);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) ' ', intArray49);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        util51.getNextPermutationNumber(intArray83);
        int int89 = util47.removeDuplicateElements(intArray83);
        util0.getNextPermutationNumber(intArray83);
        Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        util41.getNextPermutationNumber(intArray73);
        int int80 = util31.findKthLargestViaQuickSort(intArray73, (int) (short) 10);
        util16.getNextPermutationNumber(intArray73);
        int int82 = util0.removeDuplicateElements(intArray73);
        int[] intArray83 = null;
        int int84 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        Util util6 = new Util();
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        util6.getNextPermutationNumber(intArray14);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) -1, 10, '4' };
        util18.getNextPermutationNumber(intArray31);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util33.findKthLargestViaQuickSort(intArray50, (int) (short) 1);
        util18.getNextPermutationNumber(intArray50);
        int int57 = util6.threeSumClosest(intArray50, 100);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int75 = util58.threeSumClosest(intArray70, (int) (short) 100);
        int int76 = util6.findMinViaIteration(intArray70);
        int int78 = util5.threeSumClosest(intArray70, 4);
        int int79 = util0.findMinSubArrayLen((int) (byte) 0, intArray70);
        Class<?> wildcardClass80 = intArray70.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, 1);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        util76.getNextPermutationNumber(intArray84);
        int[] intArray94 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int96 = util76.threeSumClosest(intArray94, 0);
        int int97 = util0.removeDuplicateElements(intArray94);
        Class<?> wildcardClass98 = intArray94.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 7 + "'", int97 == 7);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util30.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        util30.getNextPermutationNumber(intArray63);
        int[] intArray69 = new int[] { 1, (short) 1 };
        int int71 = util30.threeSumClosest(intArray69, (int) '4');
        util0.getNextPermutationNumber(intArray69);
        Util util73 = new Util();
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        util73.getNextPermutationNumber(intArray81);
        int[] intArray91 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int93 = util73.threeSumClosest(intArray91, 0);
        int int95 = util0.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        util10.getNextPermutationNumber(intArray42);
        int int49 = util0.findKthLargestViaQuickSort(intArray42, (int) (short) 10);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int int65 = util50.findMinSubArrayLen((int) '#', intArray62);
        int int66 = util0.removeDuplicateElements(intArray62);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        util67.getNextPermutationNumber(intArray75);
        int[] intArray85 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int87 = util67.threeSumClosest(intArray85, 0);
        int int88 = util0.findMinViaIteration(intArray85);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Class<?> wildcardClass46 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util38.findMinSubArrayLen(0, intArray67);
        util0.getNextPermutationNumber(intArray67);
        Class<?> wildcardClass71 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        util0.getNextPermutationNumber(intArray60);
        Class<?> wildcardClass66 = intArray60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int53 = util22.findMinSubArrayLen(0, intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util22.removeDuplicateElements(intArray61);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int[] intArray88 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int90 = util70.threeSumClosest(intArray88, 0);
        int int91 = util66.removeDuplicateElements(intArray88);
        int[] intArray93 = new int[] { (byte) 10 };
        int int95 = util66.threeSumClosest(intArray93, 7);
        int int96 = util22.findMinSubArrayLen(4, intArray93);
        util0.getNextPermutationNumber(intArray93);
        int[] intArray98 = null;
        int int99 = util0.findMinViaIteration(intArray98);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util28.findMinSubArrayLen((int) '#', intArray40);
        util24.getNextPermutationNumber(intArray40);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int81 = util60.findKthLargestViaQuickSort(intArray77, (int) (short) 1);
        util45.getNextPermutationNumber(intArray77);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util45.threeSumClosest(intArray90, (-1));
        int int95 = util24.removeDuplicateElements(intArray90);
        int int96 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        int int20 = util0.threeSumClosest(intArray18, 7);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        util22.getNextPermutationNumber(intArray57);
        util21.getNextPermutationNumber(intArray57);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int[] intArray79 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int81 = util61.threeSumClosest(intArray79, 0);
        Util util83 = new Util();
        Util util84 = new Util();
        int[] intArray86 = null;
        int int87 = util84.findMinSubArrayLen((int) '4', intArray86);
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int int93 = util84.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        util83.getNextPermutationNumber(intArray91);
        int int95 = util61.findMinSubArrayLen(52, intArray91);
        int int96 = util21.removeDuplicateElements(intArray91);
        int int97 = util0.findMinViaIteration(intArray91);
        Class<?> wildcardClass98 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util0.removeDuplicateElements(intArray46);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int71 = util56.findMinSubArrayLen((int) '#', intArray68);
        util52.getNextPermutationNumber(intArray68);
        int int73 = util0.findMinSubArrayLen(7, intArray68);
        Class<?> wildcardClass74 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 4 + "'", int50 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        int int20 = util0.threeSumClosest(intArray18, 7);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int[] intArray34 = new int[] { (short) -1, 10, '4' };
        util21.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int46 = util21.removeDuplicateElements(intArray43);
        int int47 = util0.findMinViaIteration(intArray43);
        Class<?> wildcardClass48 = intArray43.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        int int46 = util0.threeSumClosest(intArray44, 100);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) ' ', intArray49);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        util51.getNextPermutationNumber(intArray83);
        int int89 = util47.removeDuplicateElements(intArray83);
        util0.getNextPermutationNumber(intArray83);
        Class<?> wildcardClass91 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util38.findMinSubArrayLen(0, intArray67);
        util0.getNextPermutationNumber(intArray67);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int86 = util71.findMinSubArrayLen((int) '#', intArray83);
        int int87 = util0.findMinViaIteration(intArray83);
        Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util30.findMinSubArrayLen((int) '#', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int80 = util46.findMinSubArrayLen(52, intArray76);
        int[] intArray85 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int87 = util46.threeSumClosest(intArray85, (-1));
        util30.getNextPermutationNumber(intArray85);
        int int90 = util0.findKthLargestViaQuickSort(intArray85, 7);
        Class<?> wildcardClass91 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        util0.getNextPermutationNumber(intArray65);
        Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 52, -1]");
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) ' ', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util21.findMinSubArrayLen((int) '#', intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util21.findMinViaIteration(intArray54);
        int[] intArray62 = new int[] { (byte) 100, 52, (short) 0 };
        int int64 = util21.threeSumClosest(intArray62, (int) (short) 1);
        int int65 = util0.removeDuplicateElements(intArray62);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        util67.getNextPermutationNumber(intArray75);
        int int79 = util0.findMinSubArrayLen(100, intArray75);
        Class<?> wildcardClass80 = intArray75.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        util0.getNextPermutationNumber(intArray65);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int89 = util68.findKthLargestViaQuickSort(intArray85, (int) (short) 1);
        int int90 = util0.removeDuplicateElements(intArray85);
        Class<?> wildcardClass91 = intArray85.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 4 + "'", int90 == 4);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        util22.getNextPermutationNumber(intArray57);
        int int60 = util7.removeDuplicateElements(intArray57);
        int int61 = util0.removeDuplicateElements(intArray57);
        Class<?> wildcardClass62 = intArray57.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 4 + "'", int61 == 4);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        util38.getNextPermutationNumber(intArray70);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util38.threeSumClosest(intArray83, (-1));
        int int89 = util0.findKthLargestViaQuickSort(intArray83, 5);
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        util24.getNextPermutationNumber(intArray56);
        int int63 = util0.threeSumClosest(intArray56, (int) (byte) 100);
        Class<?> wildcardClass64 = intArray56.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        int[] intArray11 = new int[] { (byte) 10, '#', (-1) };
        int int13 = util4.findKthLargestViaQuickSort(intArray11, (int) (byte) 1);
        Util util14 = new Util();
        int[] intArray16 = null;
        int int17 = util14.findMinSubArrayLen((int) '4', intArray16);
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int int23 = util14.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        int[] intArray27 = new int[] { (short) -1, 10, '4' };
        util14.getNextPermutationNumber(intArray27);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int int50 = util29.findKthLargestViaQuickSort(intArray46, (int) (short) 1);
        util14.getNextPermutationNumber(intArray46);
        int int53 = util4.findKthLargestViaQuickSort(intArray46, (int) (short) 10);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        util54.getNextPermutationNumber(intArray62);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int[] intArray79 = new int[] { (short) -1, 10, '4' };
        util66.getNextPermutationNumber(intArray79);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int91 = util66.removeDuplicateElements(intArray88);
        int int93 = util54.threeSumClosest(intArray88, 0);
        int int94 = util4.findMinViaIteration(intArray88);
        int int96 = util0.threeSumClosest(intArray88, 100);
        int[] intArray97 = null;
        int int99 = util0.threeSumClosest(intArray97, (int) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        int[] intArray30 = new int[] { (short) -1, 10, '4' };
        util17.getNextPermutationNumber(intArray30);
        int int32 = util1.findMinSubArrayLen(0, intArray30);
        Util util33 = new Util();
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        util33.getNextPermutationNumber(intArray41);
        int[] intArray51 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int53 = util33.threeSumClosest(intArray51, 0);
        int int55 = util1.findKthLargestViaQuickSort(intArray51, (int) (byte) 100);
        util0.getNextPermutationNumber(intArray51);
        int[] intArray57 = null;
        util0.getNextPermutationNumber(intArray57);
        Class<?> wildcardClass59 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int int70 = util49.findKthLargestViaQuickSort(intArray66, (int) (short) 1);
        util34.getNextPermutationNumber(intArray66);
        int int73 = util22.threeSumClosest(intArray66, 100);
        int int75 = util0.findKthLargestViaQuickSort(intArray66, (int) (short) 100);
        Class<?> wildcardClass76 = intArray66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        util51.getNextPermutationNumber(intArray59);
        int[] intArray69 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int71 = util51.threeSumClosest(intArray69, 0);
        int int72 = util47.removeDuplicateElements(intArray69);
        int int74 = util0.threeSumClosest(intArray69, 2);
        Class<?> wildcardClass75 = intArray69.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util56.removeDuplicateElements(intArray78);
        int int83 = util44.threeSumClosest(intArray78, 0);
        util0.getNextPermutationNumber(intArray78);
        Class<?> wildcardClass85 = intArray78.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        util22.getNextPermutationNumber(intArray57);
        util21.getNextPermutationNumber(intArray57);
        int int61 = util0.findMinViaIteration(intArray57);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        util66.getNextPermutationNumber(intArray74);
        int[] intArray84 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int86 = util66.threeSumClosest(intArray84, 0);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util0.findKthLargestViaQuickSort(intArray84, 10);
        int[] intArray90 = null;
        int int91 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 7 + "'", int87 == 7);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int68 = util47.findKthLargestViaQuickSort(intArray64, (int) (short) 1);
        util32.getNextPermutationNumber(intArray64);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        Util util74 = new Util();
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        util74.getNextPermutationNumber(intArray82);
        int[] intArray92 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int94 = util74.threeSumClosest(intArray92, 0);
        int int95 = util70.removeDuplicateElements(intArray92);
        int int97 = util32.threeSumClosest(intArray92, 0);
        int int98 = util22.removeDuplicateElements(intArray92);
        int int99 = util0.removeDuplicateElements(intArray92);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 7 + "'", int98 == 7);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 7 + "'", int99 == 7);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        int[] intArray40 = null;
        int int42 = util0.findKthLargestViaQuickSort(intArray40, (int) (short) 100);
        Class<?> wildcardClass43 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int int41 = util0.threeSumClosest(intArray37, 10);
        Class<?> wildcardClass42 = intArray37.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        util7.getNextPermutationNumber(intArray39);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        int int76 = util45.findMinSubArrayLen(0, intArray74);
        util7.getNextPermutationNumber(intArray74);
        int int78 = util0.findMinViaIteration(intArray74);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int[] intArray92 = new int[] { (short) -1, 10, '4' };
        util79.getNextPermutationNumber(intArray92);
        int int95 = util0.findKthLargestViaQuickSort(intArray92, (int) '4');
        Class<?> wildcardClass96 = intArray92.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util30.findMinSubArrayLen((int) '#', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int80 = util46.findMinSubArrayLen(52, intArray76);
        int[] intArray85 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int87 = util46.threeSumClosest(intArray85, (-1));
        util30.getNextPermutationNumber(intArray85);
        int int90 = util0.findKthLargestViaQuickSort(intArray85, 7);
        int[] intArray91 = null;
        int int92 = util0.findMinViaIteration(intArray91);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        int[] intArray21 = null;
        int int22 = util19.findMinSubArrayLen((int) '4', intArray21);
        int[] intArray26 = new int[] { (byte) 10, '#', (-1) };
        int int28 = util19.findKthLargestViaQuickSort(intArray26, (int) (byte) 1);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int40 = util19.findKthLargestViaQuickSort(intArray36, (int) (short) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        util19.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int[] intArray79 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int81 = util61.threeSumClosest(intArray79, 0);
        int int82 = util57.removeDuplicateElements(intArray79);
        int[] intArray84 = new int[] { (byte) 10 };
        int int86 = util57.threeSumClosest(intArray84, 7);
        util19.getNextPermutationNumber(intArray84);
        int int89 = util0.findKthLargestViaQuickSort(intArray84, (int) (short) -1);
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        int int72 = util41.findMinSubArrayLen(0, intArray70);
        int int74 = util31.findKthLargestViaQuickSort(intArray70, 1);
        int[] intArray76 = null;
        int int77 = util31.findMinSubArrayLen(1, intArray76);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util78.getNextPermutationNumber(intArray86);
        int int90 = util31.findMinViaIteration(intArray86);
        int int91 = util21.findMinViaIteration(intArray86);
        int int93 = util0.findKthLargestViaQuickSort(intArray86, (int) (short) 100);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int int59 = util0.findMinViaIteration(intArray55);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        int int76 = util0.threeSumClosest(intArray73, (int) (byte) 100);
        Class<?> wildcardClass77 = intArray73.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) ' ', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util21.findMinSubArrayLen((int) '#', intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util21.findMinViaIteration(intArray54);
        int[] intArray62 = new int[] { (byte) 100, 52, (short) 0 };
        int int64 = util21.threeSumClosest(intArray62, (int) (short) 1);
        int int65 = util0.removeDuplicateElements(intArray62);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int82 = util67.findMinSubArrayLen((int) '#', intArray79);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int[] intArray96 = new int[] { (short) -1, 10, '4' };
        util83.getNextPermutationNumber(intArray96);
        int int98 = util67.removeDuplicateElements(intArray96);
        int int99 = util0.findMinSubArrayLen((int) (byte) 100, intArray96);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util38.findMinSubArrayLen(0, intArray67);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int int80 = util38.removeDuplicateElements(intArray77);
        util0.getNextPermutationNumber(intArray77);
        int[] intArray82 = null;
        int int83 = util0.findMinViaIteration(intArray82);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) ' ', intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util11.findMinSubArrayLen((int) '#', intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util32.findMinSubArrayLen((int) '#', intArray44);
        int int48 = util11.findMinViaIteration(intArray44);
        int int49 = util0.findMinSubArrayLen(52, intArray44);
        int[] intArray50 = null;
        int int51 = util0.findMinViaIteration(intArray50);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, 100);
        Util util46 = new Util();
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) '4', intArray72);
        int[] intArray77 = new int[] { (byte) 10, '#', (-1) };
        int int79 = util70.findKthLargestViaQuickSort(intArray77, (int) (byte) 1);
        int[] intArray83 = new int[] { (short) -1, 10, '4' };
        util70.getNextPermutationNumber(intArray83);
        util48.getNextPermutationNumber(intArray83);
        int int86 = util47.removeDuplicateElements(intArray83);
        int int88 = util46.findKthLargestViaQuickSort(intArray83, 52);
        util0.getNextPermutationNumber(intArray83);
        Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) ' ', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util21.findMinSubArrayLen((int) '#', intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util21.findMinViaIteration(intArray54);
        int[] intArray62 = new int[] { (byte) 100, 52, (short) 0 };
        int int64 = util21.threeSumClosest(intArray62, (int) (short) 1);
        int int65 = util0.removeDuplicateElements(intArray62);
        Class<?> wildcardClass66 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 52, 100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray39 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int41 = util0.threeSumClosest(intArray39, (-1));
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util0.removeDuplicateElements(intArray54);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        int int81 = util0.findMinViaIteration(intArray76);
        Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Class<?> wildcardClass23 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        int int64 = util33.findMinSubArrayLen(0, intArray62);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        util65.getNextPermutationNumber(intArray73);
        int[] intArray83 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int85 = util65.threeSumClosest(intArray83, 0);
        int int87 = util33.findKthLargestViaQuickSort(intArray83, (int) (byte) 100);
        util32.getNextPermutationNumber(intArray83);
        int int89 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass90 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int int75 = util0.removeDuplicateElements(intArray70);
        int[] intArray76 = null;
        int int78 = util0.findKthLargestViaQuickSort(intArray76, 1);
        Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        Class<?> wildcardClass38 = intArray33.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        util23.getNextPermutationNumber(intArray31);
        int[] intArray41 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int43 = util23.threeSumClosest(intArray41, 0);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        util45.getNextPermutationNumber(intArray53);
        int int57 = util23.findMinSubArrayLen(52, intArray53);
        int[] intArray58 = null;
        int int59 = util23.findMinViaIteration(intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util61.findMinSubArrayLen((int) '#', intArray73);
        int int77 = util23.findMinSubArrayLen(52, intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        Util util13 = new Util();
        int[] intArray15 = null;
        int int16 = util13.findMinSubArrayLen((int) '4', intArray15);
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int int22 = util13.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        util12.getNextPermutationNumber(intArray20);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int60 = util39.findKthLargestViaQuickSort(intArray56, (int) (short) 1);
        util24.getNextPermutationNumber(intArray56);
        int int63 = util12.threeSumClosest(intArray56, 100);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int int81 = util64.threeSumClosest(intArray76, (int) (short) 100);
        int int82 = util12.findMinViaIteration(intArray76);
        util0.getNextPermutationNumber(intArray76);
        Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util26.findKthLargestViaQuickSort(intArray43, (int) (short) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int int67 = util52.findMinSubArrayLen((int) '#', intArray64);
        util48.getNextPermutationNumber(intArray64);
        int int69 = util26.removeDuplicateElements(intArray64);
        int int71 = util0.findKthLargestViaQuickSort(intArray64, (int) (short) -1);
        Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util28.findMinSubArrayLen((int) '#', intArray40);
        util24.getNextPermutationNumber(intArray40);
        int[] intArray45 = null;
        util24.getNextPermutationNumber(intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int63 = util24.threeSumClosest(intArray60, (int) (short) -1);
        int int64 = util0.findMinViaIteration(intArray60);
        int[] intArray65 = null;
        int int67 = util0.threeSumClosest(intArray65, 4);
        Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        util22.getNextPermutationNumber(intArray57);
        util21.getNextPermutationNumber(intArray57);
        int int61 = util0.findMinViaIteration(intArray57);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        Util util66 = new Util();
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        util66.getNextPermutationNumber(intArray74);
        int[] intArray84 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int86 = util66.threeSumClosest(intArray84, 0);
        int int87 = util62.removeDuplicateElements(intArray84);
        int int89 = util0.findKthLargestViaQuickSort(intArray84, 10);
        Class<?> wildcardClass90 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 7 + "'", int87 == 7);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray4 = null;
        int int5 = util2.findMinSubArrayLen((int) '4', intArray4);
        int[] intArray9 = new int[] { (byte) 10, '#', (-1) };
        int int11 = util2.findKthLargestViaQuickSort(intArray9, (int) (byte) 1);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int int23 = util2.findKthLargestViaQuickSort(intArray19, (int) (short) 1);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        util2.getNextPermutationNumber(intArray37);
        int int40 = util1.removeDuplicateElements(intArray37);
        int int42 = util0.findKthLargestViaQuickSort(intArray37, 52);
        int[] intArray43 = null;
        int int44 = util0.removeDuplicateElements(intArray43);
        int[] intArray45 = null;
        int int46 = util0.removeDuplicateElements(intArray45);
        Class<?> wildcardClass47 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int58 = util37.findKthLargestViaQuickSort(intArray54, (int) (short) 1);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        util37.getNextPermutationNumber(intArray72);
        int int75 = util22.removeDuplicateElements(intArray72);
        int int77 = util21.threeSumClosest(intArray72, (int) (short) 0);
        int int78 = util0.findMinViaIteration(intArray72);
        Class<?> wildcardClass79 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int53 = util22.findMinSubArrayLen(0, intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util22.removeDuplicateElements(intArray61);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int[] intArray88 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int90 = util70.threeSumClosest(intArray88, 0);
        int int91 = util66.removeDuplicateElements(intArray88);
        int[] intArray93 = new int[] { (byte) 10 };
        int int95 = util66.threeSumClosest(intArray93, 7);
        int int96 = util22.findMinSubArrayLen(4, intArray93);
        util0.getNextPermutationNumber(intArray93);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Util util6 = new Util();
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        util6.getNextPermutationNumber(intArray14);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) -1, 10, '4' };
        util18.getNextPermutationNumber(intArray31);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util33.findKthLargestViaQuickSort(intArray50, (int) (short) 1);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) -1, 10, '4' };
        util55.getNextPermutationNumber(intArray68);
        util33.getNextPermutationNumber(intArray68);
        int int71 = util18.removeDuplicateElements(intArray68);
        int int73 = util6.findKthLargestViaQuickSort(intArray68, (int) (short) 100);
        util0.getNextPermutationNumber(intArray68);
        Class<?> wildcardClass75 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        int int46 = util0.threeSumClosest(intArray44, 100);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int84 = util59.removeDuplicateElements(intArray81);
        int int86 = util47.threeSumClosest(intArray81, 0);
        int int87 = util0.removeDuplicateElements(intArray81);
        Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Class<?> wildcardClass32 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        int[] intArray57 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int59 = util39.threeSumClosest(intArray57, 0);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int int73 = util39.findMinSubArrayLen(52, intArray69);
        int[] intArray78 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int80 = util39.threeSumClosest(intArray78, (-1));
        util23.getNextPermutationNumber(intArray78);
        int int82 = util0.findMinViaIteration(intArray78);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util65.findKthLargestViaQuickSort(intArray82, (int) (short) 1);
        util50.getNextPermutationNumber(intArray82);
        int int89 = util38.threeSumClosest(intArray82, 100);
        int int91 = util16.findKthLargestViaQuickSort(intArray82, 1);
        util4.getNextPermutationNumber(intArray82);
        int int93 = util0.findMinViaIteration(intArray82);
        int[] intArray94 = null;
        int int95 = util0.findMinViaIteration(intArray94);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int[] intArray71 = new int[] { (short) -1, 10, '4' };
        util58.getNextPermutationNumber(intArray71);
        int int73 = util42.findMinSubArrayLen(0, intArray71);
        int int75 = util32.findKthLargestViaQuickSort(intArray71, 1);
        int[] intArray77 = null;
        int int78 = util32.findMinSubArrayLen(1, intArray77);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        util79.getNextPermutationNumber(intArray87);
        int int91 = util32.findMinViaIteration(intArray87);
        int int93 = util0.findKthLargestViaQuickSort(intArray87, 10);
        Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util22.removeDuplicateElements(intArray44);
        int int48 = util0.findMinSubArrayLen(4, intArray44);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util49.removeDuplicateElements(intArray71);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        util49.getNextPermutationNumber(intArray82);
        int[] intArray88 = new int[] { 1, (short) 1 };
        int int90 = util49.threeSumClosest(intArray88, (int) '4');
        util0.getNextPermutationNumber(intArray88);
        Class<?> wildcardClass92 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int[] intArray60 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int62 = util42.threeSumClosest(intArray60, 0);
        int int63 = util38.removeDuplicateElements(intArray60);
        int int65 = util0.threeSumClosest(intArray60, 0);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int int83 = util66.threeSumClosest(intArray78, (int) (short) 100);
        int[] intArray88 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int90 = util66.findKthLargestViaQuickSort(intArray88, 100);
        int int92 = util0.threeSumClosest(intArray88, 10);
        int[] intArray93 = null;
        int int94 = util0.findMinViaIteration(intArray93);
        int[] intArray95 = null;
        int int96 = util0.removeDuplicateElements(intArray95);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1, 35, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int int59 = util0.findMinViaIteration(intArray55);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int[] intArray78 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int80 = util60.threeSumClosest(intArray78, 0);
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        util82.getNextPermutationNumber(intArray90);
        int int94 = util60.findMinSubArrayLen(52, intArray90);
        int int95 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int32 = util0.findMinSubArrayLen((int) (short) 1, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        int int74 = util43.findMinSubArrayLen(0, intArray72);
        int int76 = util33.findKthLargestViaQuickSort(intArray72, 1);
        int[] intArray78 = null;
        int int79 = util33.findMinSubArrayLen(1, intArray78);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int91 = util33.threeSumClosest(intArray87, (int) (byte) -1);
        int int93 = util0.findKthLargestViaQuickSort(intArray87, (int) (short) 1);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        util0.getNextPermutationNumber(intArray18);
        Class<?> wildcardClass20 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int26 = util1.removeDuplicateElements(intArray23);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        util1.getNextPermutationNumber(intArray34);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) -1, 10, '4' };
        util55.getNextPermutationNumber(intArray68);
        int int70 = util39.findMinSubArrayLen(0, intArray68);
        Util util71 = new Util();
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        util71.getNextPermutationNumber(intArray79);
        int[] intArray89 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int91 = util71.threeSumClosest(intArray89, 0);
        int int93 = util39.findKthLargestViaQuickSort(intArray89, (int) (byte) 100);
        util38.getNextPermutationNumber(intArray89);
        int int95 = util1.findMinViaIteration(intArray89);
        int int97 = util0.findKthLargestViaQuickSort(intArray89, (int) 'a');
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util13 = new Util();
        int[] intArray15 = null;
        int int16 = util13.findMinSubArrayLen((int) '4', intArray15);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int32 = util17.findMinSubArrayLen((int) '#', intArray29);
        util13.getNextPermutationNumber(intArray29);
        int[] intArray34 = null;
        util13.getNextPermutationNumber(intArray34);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util36.findMinSubArrayLen((int) '#', intArray48);
        int int52 = util13.removeDuplicateElements(intArray48);
        int[] intArray59 = new int[] { 35, 10, ' ', 5, (-1), (byte) 10 };
        int int60 = util13.findMinViaIteration(intArray59);
        int int61 = util0.findMinSubArrayLen(35, intArray59);
        Class<?> wildcardClass62 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[35, 10, 32, 5, -1, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        util41.getNextPermutationNumber(intArray73);
        Util util79 = new Util();
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        util79.getNextPermutationNumber(intArray87);
        int int92 = util41.findKthLargestViaQuickSort(intArray87, 1);
        util40.getNextPermutationNumber(intArray87);
        int int94 = util0.removeDuplicateElements(intArray87);
        Class<?> wildcardClass95 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int53 = util22.findMinSubArrayLen(0, intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int int64 = util22.removeDuplicateElements(intArray61);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int[] intArray88 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int90 = util70.threeSumClosest(intArray88, 0);
        int int91 = util66.removeDuplicateElements(intArray88);
        int[] intArray93 = new int[] { (byte) 10 };
        int int95 = util66.threeSumClosest(intArray93, 7);
        int int96 = util22.findMinSubArrayLen(4, intArray93);
        util0.getNextPermutationNumber(intArray93);
        Class<?> wildcardClass98 = intArray93.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int[] intArray61 = new int[] { (short) -1, 10, '4' };
        util48.getNextPermutationNumber(intArray61);
        int int63 = util32.findMinSubArrayLen(0, intArray61);
        int int65 = util22.findKthLargestViaQuickSort(intArray61, 1);
        int[] intArray67 = null;
        int int68 = util22.findMinSubArrayLen(1, intArray67);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util22.threeSumClosest(intArray76, (int) (byte) -1);
        int int82 = util0.threeSumClosest(intArray76, (int) (short) 10);
        Util util84 = new Util();
        int[] intArray86 = null;
        int int87 = util84.findMinSubArrayLen((int) '4', intArray86);
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int int93 = util84.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util0.findMinSubArrayLen((int) (short) 0, intArray91);
        Class<?> wildcardClass95 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.findMinViaIteration(intArray88);
        int int92 = util0.removeDuplicateElements(intArray88);
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int[] intArray65 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int67 = util47.threeSumClosest(intArray65, 0);
        int int68 = util0.findMinViaIteration(intArray65);
        int[] intArray70 = null;
        int int71 = util0.findMinSubArrayLen((int) (short) -1, intArray70);
        Class<?> wildcardClass72 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int42 = util21.findKthLargestViaQuickSort(intArray38, (int) (short) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        util21.getNextPermutationNumber(intArray56);
        int int59 = util20.removeDuplicateElements(intArray56);
        int int61 = util19.findKthLargestViaQuickSort(intArray56, 52);
        int int63 = util0.threeSumClosest(intArray56, (int) (short) 100);
        int[] intArray64 = null;
        util0.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        int int88 = util0.findMinViaIteration(intArray83);
        Class<?> wildcardClass89 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int38 = util23.findMinSubArrayLen((int) '#', intArray35);
        int int39 = util0.removeDuplicateElements(intArray35);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int77 = util56.findKthLargestViaQuickSort(intArray73, (int) (short) 1);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int[] intArray91 = new int[] { (short) -1, 10, '4' };
        util78.getNextPermutationNumber(intArray91);
        util56.getNextPermutationNumber(intArray91);
        int int94 = util41.removeDuplicateElements(intArray91);
        int int96 = util40.threeSumClosest(intArray91, (int) (short) 0);
        int int97 = util0.findMinViaIteration(intArray91);
        int[] intArray98 = null;
        int int99 = util0.removeDuplicateElements(intArray98);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int[] intArray61 = new int[] { (short) -1, 10, '4' };
        util48.getNextPermutationNumber(intArray61);
        int int63 = util32.findMinSubArrayLen(0, intArray61);
        int int65 = util22.findKthLargestViaQuickSort(intArray61, 1);
        int[] intArray67 = null;
        int int68 = util22.findMinSubArrayLen(1, intArray67);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util22.threeSumClosest(intArray76, (int) (byte) -1);
        int int82 = util0.threeSumClosest(intArray76, (int) (short) 10);
        Class<?> wildcardClass83 = intArray76.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int[] intArray40 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int42 = util22.threeSumClosest(intArray40, 0);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int int54 = util22.findMinSubArrayLen((int) (short) 1, intArray51);
        util0.getNextPermutationNumber(intArray51);
        Class<?> wildcardClass56 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        util5.getNextPermutationNumber(intArray13);
        int[] intArray23 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int25 = util5.threeSumClosest(intArray23, 0);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int int62 = util41.findKthLargestViaQuickSort(intArray58, (int) (short) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int[] intArray76 = new int[] { (short) -1, 10, '4' };
        util63.getNextPermutationNumber(intArray76);
        util41.getNextPermutationNumber(intArray76);
        int int79 = util26.removeDuplicateElements(intArray76);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int[] intArray93 = new int[] { (short) -1, 10, '4' };
        util80.getNextPermutationNumber(intArray93);
        int int95 = util26.findMinViaIteration(intArray93);
        int int97 = util5.findKthLargestViaQuickSort(intArray93, (int) 'a');
        int int98 = util0.findMinSubArrayLen((int) (short) 100, intArray93);
        Class<?> wildcardClass99 = intArray93.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 4 + "'", int79 == 4);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util0.findMinSubArrayLen((int) (byte) 10, intArray68);
        int[] intArray75 = null;
        int int77 = util0.threeSumClosest(intArray75, 35);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util78.getNextPermutationNumber(intArray86);
        int int91 = util0.threeSumClosest(intArray86, (int) (byte) 1);
        Class<?> wildcardClass92 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util28.findKthLargestViaQuickSort(intArray45, (int) (short) 1);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        util28.getNextPermutationNumber(intArray63);
        int int66 = util27.removeDuplicateElements(intArray63);
        int int68 = util26.findKthLargestViaQuickSort(intArray63, 52);
        int int70 = util0.threeSumClosest(intArray63, 7);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util0.findMinViaIteration(intArray78);
        Class<?> wildcardClass82 = intArray78.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        util7.getNextPermutationNumber(intArray39);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util7.threeSumClosest(intArray52, (-1));
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int93 = util72.findKthLargestViaQuickSort(intArray89, (int) (short) 1);
        util57.getNextPermutationNumber(intArray89);
        int int95 = util7.removeDuplicateElements(intArray89);
        int int96 = util0.removeDuplicateElements(intArray89);
        Class<?> wildcardClass97 = intArray89.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int42 = util21.findKthLargestViaQuickSort(intArray38, (int) (short) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        util21.getNextPermutationNumber(intArray56);
        int int59 = util20.removeDuplicateElements(intArray56);
        int int61 = util19.findKthLargestViaQuickSort(intArray56, 52);
        int int63 = util0.threeSumClosest(intArray56, (int) (short) 100);
        Class<?> wildcardClass64 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        int[] intArray38 = new int[] { (short) 0, (byte) 100, '#', 0, (byte) 0, 5 };
        util0.getNextPermutationNumber(intArray38);
        Class<?> wildcardClass40 = intArray38.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 100, 35, 0, 5, 0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int[] intArray61 = new int[] { (short) -1, 10, '4' };
        util48.getNextPermutationNumber(intArray61);
        int int63 = util32.findMinSubArrayLen(0, intArray61);
        int int65 = util22.findKthLargestViaQuickSort(intArray61, 1);
        int[] intArray67 = null;
        int int68 = util22.findMinSubArrayLen(1, intArray67);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util22.threeSumClosest(intArray76, (int) (byte) -1);
        int int82 = util0.threeSumClosest(intArray76, (int) (short) 10);
        Util util84 = new Util();
        int[] intArray86 = null;
        int int87 = util84.findMinSubArrayLen((int) '4', intArray86);
        int[] intArray91 = new int[] { (byte) 10, '#', (-1) };
        int int93 = util84.findKthLargestViaQuickSort(intArray91, (int) (byte) 1);
        int int94 = util0.findMinSubArrayLen((int) (short) 0, intArray91);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        int int66 = util0.findKthLargestViaQuickSort(intArray60, (int) (byte) 100);
        int[] intArray67 = null;
        int int69 = util0.findKthLargestViaQuickSort(intArray67, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util22.removeDuplicateElements(intArray44);
        int int48 = util0.findMinSubArrayLen(4, intArray44);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) ' ', intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util49.findMinSubArrayLen((int) '#', intArray67);
        int int71 = util0.threeSumClosest(intArray67, 0);
        Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        int[] intArray57 = null;
        int int58 = util0.findMinViaIteration(intArray57);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        util59.getNextPermutationNumber(intArray67);
        int int71 = util0.findMinViaIteration(intArray67);
        Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        int[] intArray57 = new int[] { (short) -1, 10, '4' };
        util44.getNextPermutationNumber(intArray57);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int[] intArray73 = new int[] { (short) -1, 10, '4' };
        util60.getNextPermutationNumber(intArray73);
        int int75 = util44.findMinSubArrayLen(0, intArray73);
        int int77 = util34.findKthLargestViaQuickSort(intArray73, 1);
        int[] intArray79 = null;
        int int80 = util34.findMinSubArrayLen(1, intArray79);
        Util util81 = new Util();
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        util81.getNextPermutationNumber(intArray89);
        int int93 = util34.findMinViaIteration(intArray89);
        int int94 = util24.findMinViaIteration(intArray89);
        int[] intArray95 = new int[] {};
        int int96 = util24.removeDuplicateElements(intArray95);
        int int97 = util0.findMinViaIteration(intArray95);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(intArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray95), "[]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Class<?> wildcardClass38 = intArray32.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) ' ', intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util11.findMinSubArrayLen((int) '#', intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util32.findMinSubArrayLen((int) '#', intArray44);
        int int48 = util11.findMinViaIteration(intArray44);
        int int49 = util0.findMinSubArrayLen(52, intArray44);
        Class<?> wildcardClass50 = intArray44.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int[] intArray59 = new int[] { (short) -1, 10, '4' };
        util46.getNextPermutationNumber(intArray59);
        int int61 = util30.findMinSubArrayLen(0, intArray59);
        int int63 = util20.findKthLargestViaQuickSort(intArray59, 1);
        int[] intArray65 = null;
        int int66 = util20.findMinSubArrayLen(1, intArray65);
        Util util67 = new Util();
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        util67.getNextPermutationNumber(intArray75);
        int int79 = util20.findMinViaIteration(intArray75);
        int int80 = util10.findMinViaIteration(intArray75);
        int int81 = util0.findMinViaIteration(intArray75);
        Class<?> wildcardClass82 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        int int39 = util0.threeSumClosest(intArray36, (int) (short) -1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util40.findMinSubArrayLen((int) '#', intArray52);
        int int56 = util0.findMinViaIteration(intArray52);
        int[] intArray57 = null;
        int int59 = util0.findKthLargestViaQuickSort(intArray57, (int) (short) 100);
        Class<?> wildcardClass60 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        int[] intArray57 = null;
        int int58 = util0.findMinViaIteration(intArray57);
        int[] intArray59 = null;
        int int61 = util0.findKthLargestViaQuickSort(intArray59, 100);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int[] intArray56 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int58 = util38.threeSumClosest(intArray56, 0);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int70 = util38.findMinSubArrayLen((int) (short) 1, intArray67);
        int int72 = util0.findKthLargestViaQuickSort(intArray67, 10);
        Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, 1);
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.findMinViaIteration(intArray88);
        int int92 = util0.removeDuplicateElements(intArray88);
        Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int int92 = util71.findKthLargestViaQuickSort(intArray88, (int) (short) 1);
        util56.getNextPermutationNumber(intArray88);
        int int95 = util44.threeSumClosest(intArray88, 100);
        util0.getNextPermutationNumber(intArray88);
        Class<?> wildcardClass97 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        int[] intArray40 = null;
        int int42 = util0.findKthLargestViaQuickSort(intArray40, (int) (short) 100);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util43.removeDuplicateElements(intArray65);
        int int69 = util0.removeDuplicateElements(intArray65);
        Util util70 = new Util();
        int[] intArray72 = null;
        int int73 = util70.findMinSubArrayLen((int) ' ', intArray72);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        int int90 = util70.findMinSubArrayLen((int) '#', intArray88);
        int int92 = util0.findKthLargestViaQuickSort(intArray88, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        int int65 = util34.findMinSubArrayLen(0, intArray63);
        int int67 = util24.findKthLargestViaQuickSort(intArray63, 1);
        int int68 = util0.findMinViaIteration(intArray63);
        Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int[] intArray22 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int24 = util4.threeSumClosest(intArray22, 0);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray27 = new int[] { (byte) 10 };
        int int29 = util0.threeSumClosest(intArray27, 7);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        int[] intArray43 = new int[] { (short) -1, 10, '4' };
        util30.getNextPermutationNumber(intArray43);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int55 = util30.removeDuplicateElements(intArray52);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        util30.getNextPermutationNumber(intArray63);
        int[] intArray69 = new int[] { 1, (short) 1 };
        int int71 = util30.threeSumClosest(intArray69, (int) '4');
        util0.getNextPermutationNumber(intArray69);
        Util util73 = new Util();
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        util73.getNextPermutationNumber(intArray81);
        int[] intArray91 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int93 = util73.threeSumClosest(intArray91, 0);
        int int95 = util0.findKthLargestViaQuickSort(intArray91, (int) (short) 1);
        Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 100 + "'", int95 == 100);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util7 = new Util();
        int[] intArray9 = null;
        int int10 = util7.findMinSubArrayLen((int) '4', intArray9);
        int[] intArray14 = new int[] { (byte) 10, '#', (-1) };
        int int16 = util7.findKthLargestViaQuickSort(intArray14, (int) (byte) 1);
        int[] intArray20 = new int[] { (short) -1, 10, '4' };
        util7.getNextPermutationNumber(intArray20);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        util7.getNextPermutationNumber(intArray39);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int int56 = util7.threeSumClosest(intArray52, (-1));
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        Util util82 = new Util();
        int[] intArray84 = null;
        int int85 = util82.findMinSubArrayLen((int) '4', intArray84);
        int[] intArray89 = new int[] { (byte) 10, '#', (-1) };
        int int91 = util82.findKthLargestViaQuickSort(intArray89, (int) (byte) 1);
        int int93 = util72.findKthLargestViaQuickSort(intArray89, (int) (short) 1);
        util57.getNextPermutationNumber(intArray89);
        int int95 = util7.removeDuplicateElements(intArray89);
        int int96 = util0.removeDuplicateElements(intArray89);
        Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util22.removeDuplicateElements(intArray44);
        int int48 = util0.findMinSubArrayLen(4, intArray44);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util49.removeDuplicateElements(intArray71);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        util49.getNextPermutationNumber(intArray82);
        int[] intArray88 = new int[] { 1, (short) 1 };
        int int90 = util49.threeSumClosest(intArray88, (int) '4');
        util0.getNextPermutationNumber(intArray88);
        int[] intArray92 = null;
        int int94 = util0.threeSumClosest(intArray92, (int) (byte) 100);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        int int46 = util0.threeSumClosest(intArray44, 100);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int int84 = util59.removeDuplicateElements(intArray81);
        int int86 = util47.threeSumClosest(intArray81, 0);
        int int87 = util0.removeDuplicateElements(intArray81);
        Class<?> wildcardClass88 = intArray81.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray33);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util38.findMinSubArrayLen(0, intArray67);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int[] intArray88 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int90 = util70.threeSumClosest(intArray88, 0);
        int int92 = util38.findKthLargestViaQuickSort(intArray88, (int) (byte) 100);
        util37.getNextPermutationNumber(intArray88);
        int int94 = util0.findMinViaIteration(intArray88);
        int[] intArray95 = null;
        int int96 = util0.findMinViaIteration(intArray95);
        Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray4 = null;
        int int5 = util2.findMinSubArrayLen((int) '4', intArray4);
        int[] intArray9 = new int[] { (byte) 10, '#', (-1) };
        int int11 = util2.findKthLargestViaQuickSort(intArray9, (int) (byte) 1);
        util1.getNextPermutationNumber(intArray9);
        Util util13 = new Util();
        int[] intArray15 = null;
        int int16 = util13.findMinSubArrayLen((int) '4', intArray15);
        int[] intArray20 = new int[] { (byte) 10, '#', (-1) };
        int int22 = util13.findKthLargestViaQuickSort(intArray20, (int) (byte) 1);
        int[] intArray26 = new int[] { (short) -1, 10, '4' };
        util13.getNextPermutationNumber(intArray26);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util28.findKthLargestViaQuickSort(intArray45, (int) (short) 1);
        util13.getNextPermutationNumber(intArray45);
        int int52 = util1.threeSumClosest(intArray45, 100);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int int70 = util53.threeSumClosest(intArray65, (int) (short) 100);
        int int71 = util1.findMinViaIteration(intArray65);
        int int73 = util0.threeSumClosest(intArray65, 4);
        Class<?> wildcardClass74 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        int[] intArray55 = null;
        int int56 = util0.findMinSubArrayLen(1, intArray55);
        Class<?> wildcardClass57 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int int49 = util0.threeSumClosest(intArray45, (-1));
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        util50.getNextPermutationNumber(intArray58);
        int[] intArray68 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int70 = util50.threeSumClosest(intArray68, 0);
        int int72 = util0.threeSumClosest(intArray68, 2);
        Class<?> wildcardClass73 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int int59 = util0.findMinViaIteration(intArray55);
        int[] intArray60 = null;
        int int61 = util0.findMinViaIteration(intArray60);
        Class<?> wildcardClass62 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Class<?> wildcardClass38 = intArray35.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        int int67 = util0.removeDuplicateElements(intArray64);
        Class<?> wildcardClass68 = intArray64.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 7 + "'", int67 == 7);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) ' ', intArray6);
        int[] intArray8 = null;
        int int10 = util4.findKthLargestViaQuickSort(intArray8, 52);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int[] intArray24 = new int[] { (short) -1, 10, '4' };
        util11.getNextPermutationNumber(intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int int47 = util26.findKthLargestViaQuickSort(intArray43, (int) (short) 1);
        util11.getNextPermutationNumber(intArray43);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int[] intArray78 = new int[] { (short) -1, 10, '4' };
        util65.getNextPermutationNumber(intArray78);
        int int80 = util49.findMinSubArrayLen(0, intArray78);
        util11.getNextPermutationNumber(intArray78);
        int int82 = util4.findMinViaIteration(intArray78);
        int int83 = util0.removeDuplicateElements(intArray78);
        Class<?> wildcardClass84 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int42 = util21.findKthLargestViaQuickSort(intArray38, (int) (short) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        util21.getNextPermutationNumber(intArray56);
        int int59 = util20.removeDuplicateElements(intArray56);
        int int61 = util19.findKthLargestViaQuickSort(intArray56, 52);
        int int63 = util0.threeSumClosest(intArray56, (int) (short) 100);
        int[] intArray64 = null;
        util0.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        int int88 = util0.findMinViaIteration(intArray83);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, 100);
        int[] intArray47 = null;
        int int48 = util0.findMinSubArrayLen((int) ' ', intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) ' ', intArray51);
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        int[] intArray67 = new int[] { (short) -1, 10, '4' };
        util54.getNextPermutationNumber(intArray67);
        int int69 = util49.findMinSubArrayLen((int) '#', intArray67);
        int int71 = util0.findKthLargestViaQuickSort(intArray67, 52);
        Class<?> wildcardClass72 = intArray67.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        int[] intArray21 = null;
        int int22 = util0.removeDuplicateElements(intArray21);
        int[] intArray23 = null;
        int int25 = util0.findKthLargestViaQuickSort(intArray23, (int) (short) 10);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int45 = util30.findMinSubArrayLen((int) '#', intArray42);
        util26.getNextPermutationNumber(intArray42);
        int[] intArray47 = null;
        util26.getNextPermutationNumber(intArray47);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        int int65 = util26.threeSumClosest(intArray62, (int) (short) -1);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        int int81 = util66.findMinSubArrayLen((int) '#', intArray78);
        int int82 = util26.findMinViaIteration(intArray78);
        int int84 = util0.threeSumClosest(intArray78, 100);
        Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        util33.getNextPermutationNumber(intArray65);
        int int71 = util0.findMinSubArrayLen((int) (short) 10, intArray65);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) ' ', intArray74);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        int int92 = util72.findMinSubArrayLen((int) '#', intArray90);
        int int94 = util0.threeSumClosest(intArray90, 1);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        util38.getNextPermutationNumber(intArray54);
        int[] intArray59 = null;
        util38.getNextPermutationNumber(intArray59);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util61.findMinSubArrayLen((int) '#', intArray73);
        int int77 = util38.removeDuplicateElements(intArray73);
        util0.getNextPermutationNumber(intArray73);
        Class<?> wildcardClass79 = intArray73.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray44 = new int[] { (short) 0 };
        int int45 = util0.removeDuplicateElements(intArray44);
        Class<?> wildcardClass46 = intArray44.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int59 = util44.findMinSubArrayLen((int) '#', intArray56);
        int[] intArray60 = null;
        int int62 = util44.findKthLargestViaQuickSort(intArray60, 4);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        util63.getNextPermutationNumber(intArray71);
        int[] intArray81 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int83 = util63.threeSumClosest(intArray81, 0);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util63.findMinSubArrayLen((int) (short) 1, intArray92);
        int int97 = util44.threeSumClosest(intArray92, 7);
        int int98 = util0.removeDuplicateElements(intArray92);
        Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        int[] intArray21 = null;
        int int22 = util0.removeDuplicateElements(intArray21);
        int[] intArray23 = null;
        int int25 = util0.findKthLargestViaQuickSort(intArray23, (int) (short) 10);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util30 = new Util();
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        util30.getNextPermutationNumber(intArray38);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        int[] intArray55 = new int[] { (short) -1, 10, '4' };
        util42.getNextPermutationNumber(intArray55);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int78 = util57.findKthLargestViaQuickSort(intArray74, (int) (short) 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int[] intArray92 = new int[] { (short) -1, 10, '4' };
        util79.getNextPermutationNumber(intArray92);
        util57.getNextPermutationNumber(intArray92);
        int int95 = util42.removeDuplicateElements(intArray92);
        int int97 = util30.findKthLargestViaQuickSort(intArray92, (int) (short) 100);
        int int98 = util26.removeDuplicateElements(intArray92);
        util0.getNextPermutationNumber(intArray92);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        Util util5 = new Util();
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        util5.getNextPermutationNumber(intArray13);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        util51.getNextPermutationNumber(intArray83);
        int int90 = util39.threeSumClosest(intArray83, 100);
        int int92 = util17.findKthLargestViaQuickSort(intArray83, 1);
        util5.getNextPermutationNumber(intArray83);
        int int94 = util1.findMinViaIteration(intArray83);
        int int95 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        Util util29 = new Util();
        Util util30 = new Util();
        int[] intArray32 = null;
        int int33 = util30.findMinSubArrayLen((int) '4', intArray32);
        int[] intArray37 = new int[] { (byte) 10, '#', (-1) };
        int int39 = util30.findKthLargestViaQuickSort(intArray37, (int) (byte) 1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int int51 = util30.findKthLargestViaQuickSort(intArray47, (int) (short) 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int[] intArray65 = new int[] { (short) -1, 10, '4' };
        util52.getNextPermutationNumber(intArray65);
        util30.getNextPermutationNumber(intArray65);
        int int68 = util29.findMinViaIteration(intArray65);
        util25.getNextPermutationNumber(intArray65);
        int int70 = util0.findMinSubArrayLen((int) (short) -1, intArray65);
        Class<?> wildcardClass71 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        int[] intArray39 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int41 = util0.threeSumClosest(intArray39, (-1));
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int int57 = util42.findMinSubArrayLen((int) '#', intArray54);
        int int58 = util0.removeDuplicateElements(intArray54);
        Class<?> wildcardClass59 = intArray54.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        Util util50 = new Util();
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int int72 = util51.findKthLargestViaQuickSort(intArray68, (int) (short) 1);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        int[] intArray86 = new int[] { (short) -1, 10, '4' };
        util73.getNextPermutationNumber(intArray86);
        util51.getNextPermutationNumber(intArray86);
        int int89 = util50.removeDuplicateElements(intArray86);
        int int91 = util40.findKthLargestViaQuickSort(intArray86, (int) (byte) 0);
        int int92 = util0.findMinViaIteration(intArray86);
        int[] intArray93 = null;
        int int94 = util0.findMinViaIteration(intArray93);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int[] intArray33 = new int[] { (short) -1, 10, '4' };
        util20.getNextPermutationNumber(intArray33);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int[] intArray49 = new int[] { (short) -1, 10, '4' };
        util36.getNextPermutationNumber(intArray49);
        int int51 = util20.findMinSubArrayLen(0, intArray49);
        int int53 = util10.findKthLargestViaQuickSort(intArray49, 1);
        int[] intArray55 = null;
        int int56 = util10.findMinSubArrayLen(1, intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int int69 = util10.findMinViaIteration(intArray65);
        int int70 = util0.findMinViaIteration(intArray65);
        int[] intArray71 = new int[] {};
        int int72 = util0.removeDuplicateElements(intArray71);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int int89 = util74.findMinSubArrayLen((int) '#', intArray86);
        int int90 = util0.findMinSubArrayLen((int) (short) 10, intArray86);
        Class<?> wildcardClass91 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        int int25 = util0.removeDuplicateElements(intArray22);
        int[] intArray26 = null;
        util0.getNextPermutationNumber(intArray26);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util28.findMinSubArrayLen((int) '#', intArray40);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        util48.getNextPermutationNumber(intArray56);
        int[] intArray66 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int68 = util48.threeSumClosest(intArray66, 0);
        int int69 = util44.removeDuplicateElements(intArray66);
        int[] intArray71 = new int[] { (byte) 10 };
        int int73 = util44.threeSumClosest(intArray71, 7);
        int int75 = util28.threeSumClosest(intArray71, 7);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = util0.findMinViaIteration(intArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Index 1 out of bounds for length 1");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        int[] intArray43 = null;
        int int45 = util0.findKthLargestViaQuickSort(intArray43, 100);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        util0.getNextPermutationNumber(intArray64);
        Class<?> wildcardClass68 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        util12.getNextPermutationNumber(intArray44);
        int int51 = util0.threeSumClosest(intArray44, 100);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        Util util56 = new Util();
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        util56.getNextPermutationNumber(intArray64);
        int int69 = util52.threeSumClosest(intArray64, (int) (short) 100);
        int int70 = util0.findMinViaIteration(intArray64);
        int[] intArray71 = null;
        int int72 = util0.removeDuplicateElements(intArray71);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray80);
        Util util84 = new Util();
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        util84.getNextPermutationNumber(intArray92);
        int int97 = util0.threeSumClosest(intArray92, (int) '4');
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util22.removeDuplicateElements(intArray44);
        int int48 = util0.findMinSubArrayLen(4, intArray44);
        Class<?> wildcardClass49 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int53 = util10.findMinSubArrayLen((int) 'a', intArray50);
        int int55 = util0.threeSumClosest(intArray50, (int) (short) 100);
        Class<?> wildcardClass56 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int[] intArray44 = new int[] { (short) -1, 10, '4' };
        util31.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int62 = util31.findMinSubArrayLen(0, intArray60);
        int int64 = util21.findKthLargestViaQuickSort(intArray60, 1);
        int int66 = util0.findKthLargestViaQuickSort(intArray60, (int) (byte) 100);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int[] intArray80 = new int[] { (short) -1, 10, '4' };
        util67.getNextPermutationNumber(intArray80);
        util0.getNextPermutationNumber(intArray80);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[10, 52, -1]");
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int[] intArray33 = new int[] { (short) -1, 10, '4' };
        util20.getNextPermutationNumber(intArray33);
        Util util36 = new Util();
        int[] intArray38 = null;
        int int39 = util36.findMinSubArrayLen((int) '4', intArray38);
        int[] intArray43 = new int[] { (byte) 10, '#', (-1) };
        int int45 = util36.findKthLargestViaQuickSort(intArray43, (int) (byte) 1);
        int[] intArray49 = new int[] { (short) -1, 10, '4' };
        util36.getNextPermutationNumber(intArray49);
        int int51 = util20.findMinSubArrayLen(0, intArray49);
        int int53 = util10.findKthLargestViaQuickSort(intArray49, 1);
        int[] intArray55 = null;
        int int56 = util10.findMinSubArrayLen(1, intArray55);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        util57.getNextPermutationNumber(intArray65);
        int int69 = util10.findMinViaIteration(intArray65);
        int int70 = util0.findMinViaIteration(intArray65);
        int[] intArray71 = new int[] {};
        int int72 = util0.removeDuplicateElements(intArray71);
        Class<?> wildcardClass73 = intArray71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        int[] intArray38 = new int[] { (short) 0, (byte) 100, '#', 0, (byte) 0, 5 };
        util0.getNextPermutationNumber(intArray38);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        Util util44 = new Util();
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        util44.getNextPermutationNumber(intArray52);
        int int57 = util40.threeSumClosest(intArray52, (int) (short) 100);
        int[] intArray62 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int64 = util40.findKthLargestViaQuickSort(intArray62, 100);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int[] intArray78 = new int[] { (short) -1, 10, '4' };
        util65.getNextPermutationNumber(intArray78);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int[] intArray94 = new int[] { (short) -1, 10, '4' };
        util81.getNextPermutationNumber(intArray94);
        int int96 = util65.findMinSubArrayLen(0, intArray94);
        int int98 = util40.threeSumClosest(intArray94, (-1));
        int int99 = util0.findMinViaIteration(intArray94);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 100, 35, 0, 5, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int int59 = util44.findMinSubArrayLen((int) '#', intArray56);
        int[] intArray60 = null;
        int int62 = util44.findKthLargestViaQuickSort(intArray60, 4);
        Util util63 = new Util();
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        util63.getNextPermutationNumber(intArray71);
        int[] intArray81 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int83 = util63.threeSumClosest(intArray81, 0);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util63.findMinSubArrayLen((int) (short) 1, intArray92);
        int int97 = util44.threeSumClosest(intArray92, 7);
        int int98 = util0.removeDuplicateElements(intArray92);
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int int86 = util65.findKthLargestViaQuickSort(intArray82, (int) (short) 1);
        util50.getNextPermutationNumber(intArray82);
        int int89 = util38.threeSumClosest(intArray82, 100);
        int int91 = util16.findKthLargestViaQuickSort(intArray82, 1);
        util4.getNextPermutationNumber(intArray82);
        int int93 = util0.findMinViaIteration(intArray82);
        int[] intArray94 = null;
        int int95 = util0.findMinViaIteration(intArray94);
        int[] intArray96 = null;
        int int98 = util0.threeSumClosest(intArray96, 7);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 35 + "'", int91 == 35);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        Util util20 = new Util();
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        util20.getNextPermutationNumber(intArray28);
        int[] intArray38 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int40 = util20.threeSumClosest(intArray38, 0);
        int int41 = util16.removeDuplicateElements(intArray38);
        int[] intArray43 = new int[] { (byte) 10 };
        int int45 = util16.threeSumClosest(intArray43, 7);
        int int47 = util0.threeSumClosest(intArray43, 7);
        int[] intArray48 = null;
        int int50 = util0.findKthLargestViaQuickSort(intArray48, (int) 'a');
        Class<?> wildcardClass51 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[10]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int int46 = util25.findKthLargestViaQuickSort(intArray42, (int) (short) 1);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        util25.getNextPermutationNumber(intArray60);
        int int63 = util24.findMinViaIteration(intArray60);
        int int65 = util0.threeSumClosest(intArray60, (int) '4');
        Class<?> wildcardClass66 = intArray60.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int[] intArray50 = new int[] { (short) -1, 10, '4' };
        util37.getNextPermutationNumber(intArray50);
        util15.getNextPermutationNumber(intArray50);
        int int53 = util0.removeDuplicateElements(intArray50);
        int[] intArray54 = null;
        int int55 = util0.removeDuplicateElements(intArray54);
        Class<?> wildcardClass56 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util32.findMinSubArrayLen((int) '#', intArray44);
        int[] intArray48 = null;
        int int50 = util32.findKthLargestViaQuickSort(intArray48, 4);
        Util util51 = new Util();
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.removeDuplicateElements(intArray88);
        int int93 = util51.findKthLargestViaQuickSort(intArray88, 52);
        int int95 = util32.threeSumClosest(intArray88, (int) (short) 100);
        int int97 = util0.findKthLargestViaQuickSort(intArray88, 7);
        Class<?> wildcardClass98 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        int int30 = util15.findMinSubArrayLen((int) '#', intArray27);
        Util util31 = new Util();
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        util31.getNextPermutationNumber(intArray39);
        int[] intArray49 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int51 = util31.threeSumClosest(intArray49, 0);
        Util util53 = new Util();
        Util util54 = new Util();
        int[] intArray56 = null;
        int int57 = util54.findMinSubArrayLen((int) '4', intArray56);
        int[] intArray61 = new int[] { (byte) 10, '#', (-1) };
        int int63 = util54.findKthLargestViaQuickSort(intArray61, (int) (byte) 1);
        util53.getNextPermutationNumber(intArray61);
        int int65 = util31.findMinSubArrayLen(52, intArray61);
        int[] intArray70 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int72 = util31.threeSumClosest(intArray70, (-1));
        util15.getNextPermutationNumber(intArray70);
        int int75 = util0.findKthLargestViaQuickSort(intArray70, (int) (byte) 10);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util80.findMinSubArrayLen((int) '#', intArray92);
        util76.getNextPermutationNumber(intArray92);
        int int98 = util0.findKthLargestViaQuickSort(intArray92, (int) 'a');
        Class<?> wildcardClass99 = intArray92.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        int int54 = util0.threeSumClosest(intArray51, (int) '4');
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util0.findMinSubArrayLen((int) (byte) 10, intArray68);
        int[] intArray75 = null;
        util0.getNextPermutationNumber(intArray75);
        Class<?> wildcardClass77 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray44 = null;
        util0.getNextPermutationNumber(intArray44);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        int[] intArray64 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int66 = util46.threeSumClosest(intArray64, 0);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int78 = util46.findMinSubArrayLen((int) (short) 1, intArray75);
        int int79 = util0.findMinViaIteration(intArray75);
        Class<?> wildcardClass80 = intArray75.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int37 = util12.removeDuplicateElements(intArray34);
        int int39 = util0.threeSumClosest(intArray34, 0);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int[] intArray53 = new int[] { (short) -1, 10, '4' };
        util40.getNextPermutationNumber(intArray53);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util55.findKthLargestViaQuickSort(intArray72, (int) (short) 1);
        util40.getNextPermutationNumber(intArray72);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int int89 = util40.threeSumClosest(intArray85, (-1));
        int int91 = util0.findKthLargestViaQuickSort(intArray85, (int) '4');
        Class<?> wildcardClass92 = intArray85.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        int int41 = util26.findMinSubArrayLen((int) '#', intArray38);
        util22.getNextPermutationNumber(intArray38);
        int int43 = util0.removeDuplicateElements(intArray38);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        int[] intArray51 = new int[] { (byte) 10, '#', (-1) };
        int int53 = util44.findKthLargestViaQuickSort(intArray51, (int) (byte) 1);
        Util util54 = new Util();
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util55.findKthLargestViaQuickSort(intArray72, (int) (short) 1);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        util55.getNextPermutationNumber(intArray90);
        int int93 = util54.removeDuplicateElements(intArray90);
        int int95 = util44.findKthLargestViaQuickSort(intArray90, (int) (byte) 0);
        int int96 = util0.removeDuplicateElements(intArray90);
        Class<?> wildcardClass97 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 4 + "'", int96 == 4);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int73 = util52.findKthLargestViaQuickSort(intArray69, (int) (short) 1);
        int int75 = util0.threeSumClosest(intArray69, (int) (byte) 0);
        Util util76 = new Util();
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        util76.getNextPermutationNumber(intArray84);
        int int88 = util0.removeDuplicateElements(intArray84);
        Class<?> wildcardClass89 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 4 + "'", int88 == 4);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        Util util5 = new Util();
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        util5.getNextPermutationNumber(intArray13);
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        util39.getNextPermutationNumber(intArray47);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        Util util76 = new Util();
        int[] intArray78 = null;
        int int79 = util76.findMinSubArrayLen((int) '4', intArray78);
        int[] intArray83 = new int[] { (byte) 10, '#', (-1) };
        int int85 = util76.findKthLargestViaQuickSort(intArray83, (int) (byte) 1);
        int int87 = util66.findKthLargestViaQuickSort(intArray83, (int) (short) 1);
        util51.getNextPermutationNumber(intArray83);
        int int90 = util39.threeSumClosest(intArray83, 100);
        int int92 = util17.findKthLargestViaQuickSort(intArray83, 1);
        util5.getNextPermutationNumber(intArray83);
        int int94 = util1.findMinViaIteration(intArray83);
        int int95 = util0.removeDuplicateElements(intArray83);
        int[] intArray96 = null;
        int int97 = util0.findMinViaIteration(intArray96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        int[] intArray41 = new int[] { (byte) 100, 52, (short) 0 };
        int int43 = util0.threeSumClosest(intArray41, (int) (short) 1);
        Class<?> wildcardClass44 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 52, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        util28.getNextPermutationNumber(intArray36);
        int int41 = util24.threeSumClosest(intArray36, (int) (short) 100);
        int[] intArray46 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int48 = util24.findKthLargestViaQuickSort(intArray46, 100);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int[] intArray78 = new int[] { (short) -1, 10, '4' };
        util65.getNextPermutationNumber(intArray78);
        int int80 = util49.findMinSubArrayLen(0, intArray78);
        int int82 = util24.threeSumClosest(intArray78, (-1));
        int int84 = util0.threeSumClosest(intArray78, (int) (byte) -1);
        Class<?> wildcardClass85 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int31 = util16.findMinSubArrayLen((int) '#', intArray28);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        int int47 = util16.removeDuplicateElements(intArray45);
        int int48 = util0.findMinViaIteration(intArray45);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util53.findMinSubArrayLen((int) '#', intArray65);
        util49.getNextPermutationNumber(intArray65);
        int[] intArray70 = null;
        util49.getNextPermutationNumber(intArray70);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) ' ', intArray75);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int[] intArray91 = new int[] { (short) -1, 10, '4' };
        util78.getNextPermutationNumber(intArray91);
        int int93 = util73.findMinSubArrayLen((int) '#', intArray91);
        int int94 = util49.findMinSubArrayLen((int) 'a', intArray91);
        int int95 = util0.removeDuplicateElements(intArray91);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        int[] intArray79 = new int[] { (byte) 10, '#', (-1) };
        int int81 = util72.findKthLargestViaQuickSort(intArray79, (int) (byte) 1);
        int int83 = util62.findKthLargestViaQuickSort(intArray79, (int) (short) 1);
        util47.getNextPermutationNumber(intArray79);
        int int86 = util37.findKthLargestViaQuickSort(intArray79, (int) (short) 10);
        util22.getNextPermutationNumber(intArray79);
        int int88 = util0.findMinViaIteration(intArray79);
        Class<?> wildcardClass89 = intArray79.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int32 = util11.findKthLargestViaQuickSort(intArray28, (int) (short) 1);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        util11.getNextPermutationNumber(intArray46);
        int int49 = util10.removeDuplicateElements(intArray46);
        int int51 = util0.findKthLargestViaQuickSort(intArray46, (int) (byte) 0);
        int[] intArray58 = new int[] { ' ', 7, 4, '#', 1, (byte) 1 };
        util0.getNextPermutationNumber(intArray58);
        Class<?> wildcardClass60 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[32, 7, 35, 1, 1, 4]");
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray22 = new int[] { 100, 35, (byte) 1, (byte) 1 };
        int int24 = util0.findKthLargestViaQuickSort(intArray22, 100);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) ' ', intArray27);
        int[] intArray29 = null;
        int int31 = util25.findKthLargestViaQuickSort(intArray29, 52);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int int54 = util33.findKthLargestViaQuickSort(intArray50, (int) (short) 1);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        int[] intArray68 = new int[] { (short) -1, 10, '4' };
        util55.getNextPermutationNumber(intArray68);
        util33.getNextPermutationNumber(intArray68);
        int int71 = util32.removeDuplicateElements(intArray68);
        int int73 = util25.findKthLargestViaQuickSort(intArray68, 4);
        int int74 = util0.findMinViaIteration(intArray68);
        Class<?> wildcardClass75 = intArray68.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 35, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Class<?> wildcardClass40 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.findMinViaIteration(intArray36);
        int[] intArray40 = null;
        int int42 = util0.findKthLargestViaQuickSort(intArray40, (int) (short) 100);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util43.removeDuplicateElements(intArray65);
        int int69 = util0.removeDuplicateElements(intArray65);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int[] intArray88 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int90 = util70.threeSumClosest(intArray88, 0);
        int int91 = util0.removeDuplicateElements(intArray88);
        Class<?> wildcardClass92 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4 + "'", int68 == 4);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int42 = util0.removeDuplicateElements(intArray39);
        Util util44 = new Util();
        int[] intArray46 = null;
        int int47 = util44.findMinSubArrayLen((int) '4', intArray46);
        Util util48 = new Util();
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        util48.getNextPermutationNumber(intArray56);
        int[] intArray66 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int68 = util48.threeSumClosest(intArray66, 0);
        int int69 = util44.removeDuplicateElements(intArray66);
        int[] intArray71 = new int[] { (byte) 10 };
        int int73 = util44.threeSumClosest(intArray71, 7);
        int int74 = util0.findMinSubArrayLen(4, intArray71);
        Class<?> wildcardClass75 = intArray71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 7 + "'", int69 == 7);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        util22.getNextPermutationNumber(intArray30);
        int int34 = util0.findMinSubArrayLen(52, intArray30);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        Util util45 = new Util();
        int[] intArray47 = null;
        int int48 = util45.findMinSubArrayLen((int) '4', intArray47);
        int[] intArray52 = new int[] { (byte) 10, '#', (-1) };
        int int54 = util45.findKthLargestViaQuickSort(intArray52, (int) (byte) 1);
        int[] intArray58 = new int[] { (short) -1, 10, '4' };
        util45.getNextPermutationNumber(intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        int[] intArray74 = new int[] { (short) -1, 10, '4' };
        util61.getNextPermutationNumber(intArray74);
        int int76 = util45.findMinSubArrayLen(0, intArray74);
        int int78 = util35.findKthLargestViaQuickSort(intArray74, 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util35.getNextPermutationNumber(intArray86);
        int int91 = util0.threeSumClosest(intArray86, (int) (short) 10);
        int[] intArray92 = null;
        int int94 = util0.findKthLargestViaQuickSort(intArray92, 10);
        Class<?> wildcardClass95 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util32.findMinSubArrayLen((int) '#', intArray44);
        int[] intArray48 = null;
        int int50 = util32.findKthLargestViaQuickSort(intArray48, 4);
        Util util51 = new Util();
        Util util52 = new Util();
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        int int74 = util53.findKthLargestViaQuickSort(intArray70, (int) (short) 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util53.getNextPermutationNumber(intArray88);
        int int91 = util52.removeDuplicateElements(intArray88);
        int int93 = util51.findKthLargestViaQuickSort(intArray88, 52);
        int int95 = util32.threeSumClosest(intArray88, (int) (short) 100);
        int int97 = util0.findKthLargestViaQuickSort(intArray88, 7);
        Class<?> wildcardClass98 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        Class<?> wildcardClass22 = intArray17.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        int[] intArray11 = new int[] { (byte) 10, '#', (-1) };
        int int13 = util4.findKthLargestViaQuickSort(intArray11, (int) (byte) 1);
        Util util14 = new Util();
        int[] intArray16 = null;
        int int17 = util14.findMinSubArrayLen((int) '4', intArray16);
        int[] intArray21 = new int[] { (byte) 10, '#', (-1) };
        int int23 = util14.findKthLargestViaQuickSort(intArray21, (int) (byte) 1);
        int int25 = util4.findKthLargestViaQuickSort(intArray21, (int) (short) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        util4.getNextPermutationNumber(intArray39);
        Util util42 = new Util();
        int[] intArray44 = null;
        int int45 = util42.findMinSubArrayLen((int) '4', intArray44);
        int[] intArray49 = new int[] { (byte) 10, '#', (-1) };
        int int51 = util42.findKthLargestViaQuickSort(intArray49, (int) (byte) 1);
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        int int63 = util42.findKthLargestViaQuickSort(intArray59, (int) (short) 1);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int[] intArray77 = new int[] { (short) -1, 10, '4' };
        util64.getNextPermutationNumber(intArray77);
        util42.getNextPermutationNumber(intArray77);
        int int81 = util4.threeSumClosest(intArray77, (int) ' ');
        Util util82 = new Util();
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        util82.getNextPermutationNumber(intArray90);
        int int94 = util4.removeDuplicateElements(intArray90);
        int int95 = util0.findMinViaIteration(intArray90);
        Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4 + "'", int94 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int47 = util22.removeDuplicateElements(intArray44);
        int int48 = util0.findMinSubArrayLen(4, intArray44);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util49.removeDuplicateElements(intArray71);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        util49.getNextPermutationNumber(intArray82);
        int[] intArray88 = new int[] { 1, (short) 1 };
        int int90 = util49.threeSumClosest(intArray88, (int) '4');
        util0.getNextPermutationNumber(intArray88);
        int[] intArray92 = null;
        int int93 = util0.findMinViaIteration(intArray92);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1, 1]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int33 = util12.findKthLargestViaQuickSort(intArray29, (int) (short) 1);
        int[] intArray34 = null;
        int int36 = util12.threeSumClosest(intArray34, (int) (byte) 100);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        util37.getNextPermutationNumber(intArray45);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        int[] intArray71 = new int[] { (byte) 10, '#', (-1) };
        int int73 = util64.findKthLargestViaQuickSort(intArray71, (int) (byte) 1);
        int int74 = util49.removeDuplicateElements(intArray71);
        int int76 = util37.threeSumClosest(intArray71, 0);
        util12.getNextPermutationNumber(intArray71);
        int int78 = util0.findMinViaIteration(intArray71);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        Util util85 = new Util();
        int[] intArray87 = null;
        int int88 = util85.findMinSubArrayLen((int) '4', intArray87);
        int[] intArray92 = new int[] { (byte) 10, '#', (-1) };
        int int94 = util85.findKthLargestViaQuickSort(intArray92, (int) (byte) 1);
        int int95 = util80.findMinSubArrayLen((int) '#', intArray92);
        int int96 = util0.findMinSubArrayLen((int) (byte) 1, intArray92);
        Class<?> wildcardClass97 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Util util58 = new Util();
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        int int80 = util59.findKthLargestViaQuickSort(intArray76, (int) (short) 1);
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        int[] intArray94 = new int[] { (short) -1, 10, '4' };
        util81.getNextPermutationNumber(intArray94);
        util59.getNextPermutationNumber(intArray94);
        int int97 = util58.removeDuplicateElements(intArray94);
        int int98 = util0.removeDuplicateElements(intArray94);
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 4 + "'", int97 == 4);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Util util40 = new Util();
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        util40.getNextPermutationNumber(intArray48);
        int[] intArray58 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int60 = util40.threeSumClosest(intArray58, 0);
        Util util62 = new Util();
        Util util63 = new Util();
        int[] intArray65 = null;
        int int66 = util63.findMinSubArrayLen((int) '4', intArray65);
        int[] intArray70 = new int[] { (byte) 10, '#', (-1) };
        int int72 = util63.findKthLargestViaQuickSort(intArray70, (int) (byte) 1);
        util62.getNextPermutationNumber(intArray70);
        int int74 = util40.findMinSubArrayLen(52, intArray70);
        int int75 = util0.removeDuplicateElements(intArray70);
        int[] intArray76 = null;
        int int78 = util0.findKthLargestViaQuickSort(intArray76, 1);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int90 = util0.findMinSubArrayLen(0, intArray87);
        Class<?> wildcardClass91 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 4 + "'", int75 == 4);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        Util util0 = new Util();
        Util util1 = new Util();
        Util util2 = new Util();
        int[] intArray4 = null;
        int int5 = util2.findMinSubArrayLen((int) '4', intArray4);
        int[] intArray9 = new int[] { (byte) 10, '#', (-1) };
        int int11 = util2.findKthLargestViaQuickSort(intArray9, (int) (byte) 1);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int int23 = util2.findKthLargestViaQuickSort(intArray19, (int) (short) 1);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        int[] intArray37 = new int[] { (short) -1, 10, '4' };
        util24.getNextPermutationNumber(intArray37);
        util2.getNextPermutationNumber(intArray37);
        int int40 = util1.removeDuplicateElements(intArray37);
        int int42 = util0.findKthLargestViaQuickSort(intArray37, 52);
        int[] intArray43 = null;
        int int44 = util0.removeDuplicateElements(intArray43);
        int[] intArray45 = null;
        int int46 = util0.removeDuplicateElements(intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) ' ', intArray53);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        int[] intArray63 = new int[] { (byte) 10, '#', (-1) };
        int int65 = util56.findKthLargestViaQuickSort(intArray63, (int) (byte) 1);
        int[] intArray69 = new int[] { (short) -1, 10, '4' };
        util56.getNextPermutationNumber(intArray69);
        int int71 = util51.findMinSubArrayLen((int) '#', intArray69);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) '4', intArray74);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int int87 = util72.findMinSubArrayLen((int) '#', intArray84);
        int int88 = util51.findMinViaIteration(intArray84);
        util47.getNextPermutationNumber(intArray84);
        int int91 = util0.threeSumClosest(intArray84, 5);
        Class<?> wildcardClass92 = intArray84.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 35 + "'", int11 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 35 + "'", int23 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4 + "'", int40 == 4);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Class<?> wildcardClass15 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.threeSumClosest(intArray17, (int) '4');
        int[] intArray23 = null;
        int int24 = util0.findMinSubArrayLen((int) (byte) 1, intArray23);
        Class<?> wildcardClass25 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        int int6 = util0.findKthLargestViaQuickSort(intArray4, 52);
        Util util8 = new Util();
        int[] intArray10 = null;
        int int11 = util8.findMinSubArrayLen((int) '4', intArray10);
        int[] intArray15 = new int[] { (byte) 10, '#', (-1) };
        int int17 = util8.findKthLargestViaQuickSort(intArray15, (int) (byte) 1);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        int[] intArray31 = new int[] { (short) -1, 10, '4' };
        util18.getNextPermutationNumber(intArray31);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        int int49 = util18.findMinSubArrayLen(0, intArray47);
        int int51 = util8.findKthLargestViaQuickSort(intArray47, 1);
        int[] intArray52 = null;
        int int54 = util8.threeSumClosest(intArray52, 100);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        int int70 = util55.findMinSubArrayLen((int) '#', intArray67);
        int int72 = util8.findKthLargestViaQuickSort(intArray67, 100);
        int int73 = util0.findMinSubArrayLen(5, intArray67);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35 + "'", int17 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        Util util67 = new Util();
        int[] intArray69 = null;
        int int70 = util67.findMinSubArrayLen((int) '4', intArray69);
        int[] intArray74 = new int[] { (byte) 10, '#', (-1) };
        int int76 = util67.findKthLargestViaQuickSort(intArray74, (int) (byte) 1);
        int int77 = util62.findMinSubArrayLen((int) '#', intArray74);
        util58.getNextPermutationNumber(intArray74);
        int int79 = util0.findMinSubArrayLen((int) (byte) 1, intArray74);
        Class<?> wildcardClass80 = intArray74.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int63 = util0.threeSumClosest(intArray60, (int) (short) 1);
        Class<?> wildcardClass64 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        Class<?> wildcardClass38 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int[] intArray60 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int62 = util42.threeSumClosest(intArray60, 0);
        int int63 = util38.removeDuplicateElements(intArray60);
        int[] intArray65 = new int[] { (byte) 10 };
        int int67 = util38.threeSumClosest(intArray65, 7);
        util0.getNextPermutationNumber(intArray65);
        Class<?> wildcardClass69 = intArray65.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int[] intArray23 = new int[] { (short) -1, 10, '4' };
        util10.getNextPermutationNumber(intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int[] intArray39 = new int[] { (short) -1, 10, '4' };
        util26.getNextPermutationNumber(intArray39);
        int int41 = util10.findMinSubArrayLen(0, intArray39);
        int int43 = util0.findKthLargestViaQuickSort(intArray39, 1);
        int[] intArray45 = null;
        int int46 = util0.findMinSubArrayLen(1, intArray45);
        Util util47 = new Util();
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        util47.getNextPermutationNumber(intArray55);
        int[] intArray65 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int67 = util47.threeSumClosest(intArray65, 0);
        int int68 = util0.findMinViaIteration(intArray65);
        Class<?> wildcardClass69 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int52 = util31.findKthLargestViaQuickSort(intArray48, (int) (short) 1);
        util16.getNextPermutationNumber(intArray48);
        int int55 = util4.threeSumClosest(intArray48, 100);
        Util util56 = new Util();
        int[] intArray58 = null;
        int int59 = util56.findMinSubArrayLen((int) '4', intArray58);
        Util util60 = new Util();
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        int[] intArray68 = new int[] { (byte) 10, '#', (-1) };
        int int70 = util61.findKthLargestViaQuickSort(intArray68, (int) (byte) 1);
        util60.getNextPermutationNumber(intArray68);
        int int73 = util56.threeSumClosest(intArray68, (int) (short) 100);
        int int74 = util4.findMinViaIteration(intArray68);
        int int75 = util0.findMinViaIteration(intArray68);
        int[] intArray76 = null;
        int int78 = util0.findKthLargestViaQuickSort(intArray76, 5);
        int[] intArray79 = null;
        util0.getNextPermutationNumber(intArray79);
        Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        int int31 = util16.findMinSubArrayLen((int) '#', intArray28);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int[] intArray45 = new int[] { (short) -1, 10, '4' };
        util32.getNextPermutationNumber(intArray45);
        int int47 = util16.removeDuplicateElements(intArray45);
        int int48 = util0.findMinViaIteration(intArray45);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int68 = util53.findMinSubArrayLen((int) '#', intArray65);
        util49.getNextPermutationNumber(intArray65);
        int[] intArray70 = null;
        util49.getNextPermutationNumber(intArray70);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) ' ', intArray75);
        Util util78 = new Util();
        int[] intArray80 = null;
        int int81 = util78.findMinSubArrayLen((int) '4', intArray80);
        int[] intArray85 = new int[] { (byte) 10, '#', (-1) };
        int int87 = util78.findKthLargestViaQuickSort(intArray85, (int) (byte) 1);
        int[] intArray91 = new int[] { (short) -1, 10, '4' };
        util78.getNextPermutationNumber(intArray91);
        int int93 = util73.findMinSubArrayLen((int) '#', intArray91);
        int int94 = util49.findMinSubArrayLen((int) 'a', intArray91);
        int int95 = util0.removeDuplicateElements(intArray91);
        Class<?> wildcardClass96 = intArray91.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 35 + "'", int87 == 35);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 4 + "'", int95 == 4);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int[] intArray35 = new int[] { (short) -1, 10, '4' };
        util22.getNextPermutationNumber(intArray35);
        util0.getNextPermutationNumber(intArray35);
        int[] intArray38 = null;
        int int40 = util0.threeSumClosest(intArray38, 52);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        int int56 = util41.findMinSubArrayLen((int) '#', intArray53);
        Util util57 = new Util();
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        Util util68 = new Util();
        int[] intArray70 = null;
        int int71 = util68.findMinSubArrayLen((int) '4', intArray70);
        int[] intArray75 = new int[] { (byte) 10, '#', (-1) };
        int int77 = util68.findKthLargestViaQuickSort(intArray75, (int) (byte) 1);
        int int79 = util58.findKthLargestViaQuickSort(intArray75, (int) (short) 1);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int[] intArray93 = new int[] { (short) -1, 10, '4' };
        util80.getNextPermutationNumber(intArray93);
        util58.getNextPermutationNumber(intArray93);
        int int96 = util57.findMinViaIteration(intArray93);
        int int98 = util41.threeSumClosest(intArray93, (int) (byte) 10);
        util0.getNextPermutationNumber(intArray93);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 35 + "'", int77 == 35);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        int int59 = util38.findKthLargestViaQuickSort(intArray55, (int) (short) 1);
        util23.getNextPermutationNumber(intArray55);
        Util util61 = new Util();
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        util61.getNextPermutationNumber(intArray69);
        int int74 = util23.findKthLargestViaQuickSort(intArray69, 1);
        Util util75 = new Util();
        int[] intArray77 = null;
        int int78 = util75.findMinSubArrayLen((int) '4', intArray77);
        int[] intArray82 = new int[] { (byte) 10, '#', (-1) };
        int int84 = util75.findKthLargestViaQuickSort(intArray82, (int) (byte) 1);
        int[] intArray88 = new int[] { (short) -1, 10, '4' };
        util75.getNextPermutationNumber(intArray88);
        util23.getNextPermutationNumber(intArray88);
        int int92 = util0.threeSumClosest(intArray88, (int) '4');
        Class<?> wildcardClass93 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Util util19 = new Util();
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        int[] intArray27 = new int[] { (byte) 10, '#', (-1) };
        int int29 = util20.findKthLargestViaQuickSort(intArray27, (int) (byte) 1);
        util19.getNextPermutationNumber(intArray27);
        int[] intArray37 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int39 = util19.threeSumClosest(intArray37, 0);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int int51 = util19.findMinSubArrayLen((int) (short) 1, intArray48);
        int int53 = util0.threeSumClosest(intArray48, 7);
        Class<?> wildcardClass54 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util23 = new Util();
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        util23.getNextPermutationNumber(intArray31);
        int[] intArray41 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int43 = util23.threeSumClosest(intArray41, 0);
        Util util45 = new Util();
        Util util46 = new Util();
        int[] intArray48 = null;
        int int49 = util46.findMinSubArrayLen((int) '4', intArray48);
        int[] intArray53 = new int[] { (byte) 10, '#', (-1) };
        int int55 = util46.findKthLargestViaQuickSort(intArray53, (int) (byte) 1);
        util45.getNextPermutationNumber(intArray53);
        int int57 = util23.findMinSubArrayLen(52, intArray53);
        int[] intArray58 = null;
        int int59 = util23.findMinViaIteration(intArray58);
        Util util61 = new Util();
        int[] intArray63 = null;
        int int64 = util61.findMinSubArrayLen((int) '4', intArray63);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        int int76 = util61.findMinSubArrayLen((int) '#', intArray73);
        int int77 = util23.findMinSubArrayLen(52, intArray73);
        int int78 = util0.findMinViaIteration(intArray73);
        Util util80 = new Util();
        Util util81 = new Util();
        int[] intArray83 = null;
        int int84 = util81.findMinSubArrayLen((int) '4', intArray83);
        int[] intArray88 = new int[] { (byte) 10, '#', (-1) };
        int int90 = util81.findKthLargestViaQuickSort(intArray88, (int) (byte) 1);
        util80.getNextPermutationNumber(intArray88);
        int int92 = util0.findMinSubArrayLen((int) (short) -1, intArray88);
        Class<?> wildcardClass93 = intArray88.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util32 = new Util();
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        int int64 = util33.findMinSubArrayLen(0, intArray62);
        Util util65 = new Util();
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        int[] intArray73 = new int[] { (byte) 10, '#', (-1) };
        int int75 = util66.findKthLargestViaQuickSort(intArray73, (int) (byte) 1);
        util65.getNextPermutationNumber(intArray73);
        int[] intArray83 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int85 = util65.threeSumClosest(intArray83, 0);
        int int87 = util33.findKthLargestViaQuickSort(intArray83, (int) (byte) 100);
        util32.getNextPermutationNumber(intArray83);
        int int89 = util0.removeDuplicateElements(intArray83);
        Class<?> wildcardClass90 = intArray83.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 35 + "'", int75 == 35);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Class<?> wildcardClass4 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        util0.getNextPermutationNumber(intArray8);
        int[] intArray18 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int20 = util0.threeSumClosest(intArray18, 0);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        int int32 = util0.findMinSubArrayLen((int) (short) 1, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        int[] intArray56 = new int[] { (short) -1, 10, '4' };
        util43.getNextPermutationNumber(intArray56);
        Util util59 = new Util();
        int[] intArray61 = null;
        int int62 = util59.findMinSubArrayLen((int) '4', intArray61);
        int[] intArray66 = new int[] { (byte) 10, '#', (-1) };
        int int68 = util59.findKthLargestViaQuickSort(intArray66, (int) (byte) 1);
        int[] intArray72 = new int[] { (short) -1, 10, '4' };
        util59.getNextPermutationNumber(intArray72);
        int int74 = util43.findMinSubArrayLen(0, intArray72);
        int int76 = util33.findKthLargestViaQuickSort(intArray72, 1);
        int[] intArray78 = null;
        int int79 = util33.findMinSubArrayLen(1, intArray78);
        Util util80 = new Util();
        int[] intArray82 = null;
        int int83 = util80.findMinSubArrayLen((int) '4', intArray82);
        int[] intArray87 = new int[] { (byte) 10, '#', (-1) };
        int int89 = util80.findKthLargestViaQuickSort(intArray87, (int) (byte) 1);
        int int91 = util33.threeSumClosest(intArray87, (int) (byte) -1);
        int int93 = util0.findKthLargestViaQuickSort(intArray87, (int) (short) 1);
        Class<?> wildcardClass94 = intArray87.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 35 + "'", int89 == 35);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 35 + "'", int93 == 35);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        Util util18 = new Util();
        int[] intArray20 = null;
        int int21 = util18.findMinSubArrayLen((int) '4', intArray20);
        int[] intArray25 = new int[] { (byte) 10, '#', (-1) };
        int int27 = util18.findKthLargestViaQuickSort(intArray25, (int) (byte) 1);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        int int39 = util18.findKthLargestViaQuickSort(intArray35, (int) (short) 1);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int[] intArray53 = new int[] { (short) -1, 10, '4' };
        util40.getNextPermutationNumber(intArray53);
        util18.getNextPermutationNumber(intArray53);
        int int56 = util0.findMinViaIteration(intArray53);
        Class<?> wildcardClass57 = intArray53.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        int[] intArray22 = null;
        util0.getNextPermutationNumber(intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int int43 = util28.findMinSubArrayLen((int) '#', intArray40);
        util24.getNextPermutationNumber(intArray40);
        int[] intArray45 = null;
        util24.getNextPermutationNumber(intArray45);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        int[] intArray60 = new int[] { (short) -1, 10, '4' };
        util47.getNextPermutationNumber(intArray60);
        int int63 = util24.threeSumClosest(intArray60, (int) (short) -1);
        int int64 = util0.findMinViaIteration(intArray60);
        Class<?> wildcardClass65 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        int[] intArray28 = new int[] { (byte) 10, '#', (-1) };
        int int30 = util21.findKthLargestViaQuickSort(intArray28, (int) (byte) 1);
        Util util31 = new Util();
        int[] intArray33 = null;
        int int34 = util31.findMinSubArrayLen((int) '4', intArray33);
        int[] intArray38 = new int[] { (byte) 10, '#', (-1) };
        int int40 = util31.findKthLargestViaQuickSort(intArray38, (int) (byte) 1);
        Util util41 = new Util();
        int[] intArray43 = null;
        int int44 = util41.findMinSubArrayLen((int) '4', intArray43);
        int[] intArray48 = new int[] { (byte) 10, '#', (-1) };
        int int50 = util41.findKthLargestViaQuickSort(intArray48, (int) (byte) 1);
        int[] intArray54 = new int[] { (short) -1, 10, '4' };
        util41.getNextPermutationNumber(intArray54);
        Util util57 = new Util();
        int[] intArray59 = null;
        int int60 = util57.findMinSubArrayLen((int) '4', intArray59);
        int[] intArray64 = new int[] { (byte) 10, '#', (-1) };
        int int66 = util57.findKthLargestViaQuickSort(intArray64, (int) (byte) 1);
        int[] intArray70 = new int[] { (short) -1, 10, '4' };
        util57.getNextPermutationNumber(intArray70);
        int int72 = util41.findMinSubArrayLen(0, intArray70);
        int int74 = util31.findKthLargestViaQuickSort(intArray70, 1);
        int[] intArray76 = null;
        int int77 = util31.findMinSubArrayLen(1, intArray76);
        Util util78 = new Util();
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        util78.getNextPermutationNumber(intArray86);
        int int90 = util31.findMinViaIteration(intArray86);
        int int91 = util21.findMinViaIteration(intArray86);
        int int93 = util0.findKthLargestViaQuickSort(intArray86, (int) (short) 100);
        int[] intArray94 = null;
        int int96 = util0.findKthLargestViaQuickSort(intArray94, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 35 + "'", int30 == 35);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 52 + "'", int74 == 52);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        util0.getNextPermutationNumber(intArray18);
        Util util20 = new Util();
        int[] intArray22 = null;
        int int23 = util20.findMinSubArrayLen((int) '4', intArray22);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int int39 = util24.findMinSubArrayLen((int) '#', intArray36);
        util20.getNextPermutationNumber(intArray36);
        util0.getNextPermutationNumber(intArray36);
        Class<?> wildcardClass42 = intArray36.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 35, -1]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        Util util35 = new Util();
        int[] intArray37 = null;
        int int38 = util35.findMinSubArrayLen((int) '4', intArray37);
        int[] intArray42 = new int[] { (byte) 10, '#', (-1) };
        int int44 = util35.findKthLargestViaQuickSort(intArray42, (int) (byte) 1);
        int[] intArray48 = new int[] { (short) -1, 10, '4' };
        util35.getNextPermutationNumber(intArray48);
        Util util51 = new Util();
        int[] intArray53 = null;
        int int54 = util51.findMinSubArrayLen((int) '4', intArray53);
        int[] intArray58 = new int[] { (byte) 10, '#', (-1) };
        int int60 = util51.findKthLargestViaQuickSort(intArray58, (int) (byte) 1);
        int[] intArray64 = new int[] { (short) -1, 10, '4' };
        util51.getNextPermutationNumber(intArray64);
        int int66 = util35.findMinSubArrayLen(0, intArray64);
        int int68 = util25.findKthLargestViaQuickSort(intArray64, 1);
        int[] intArray70 = null;
        int int71 = util25.findMinSubArrayLen(1, intArray70);
        Util util72 = new Util();
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        util72.getNextPermutationNumber(intArray80);
        int int84 = util25.findMinViaIteration(intArray80);
        int int85 = util15.findMinViaIteration(intArray80);
        int[] intArray86 = new int[] {};
        int int87 = util15.removeDuplicateElements(intArray86);
        util0.getNextPermutationNumber(intArray86);
        Class<?> wildcardClass89 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 52 + "'", int68 == 52);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        Util util10 = new Util();
        int[] intArray12 = null;
        int int13 = util10.findMinSubArrayLen((int) '4', intArray12);
        int[] intArray17 = new int[] { (byte) 10, '#', (-1) };
        int int19 = util10.findKthLargestViaQuickSort(intArray17, (int) (byte) 1);
        int int21 = util0.findKthLargestViaQuickSort(intArray17, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        Util util27 = new Util();
        Util util28 = new Util();
        int[] intArray30 = null;
        int int31 = util28.findMinSubArrayLen((int) '4', intArray30);
        int[] intArray35 = new int[] { (byte) 10, '#', (-1) };
        int int37 = util28.findKthLargestViaQuickSort(intArray35, (int) (byte) 1);
        util27.getNextPermutationNumber(intArray35);
        int int40 = util23.threeSumClosest(intArray35, (int) (short) 100);
        int int41 = util0.findMinSubArrayLen(10, intArray35);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        Util util53 = new Util();
        int[] intArray55 = null;
        int int56 = util53.findMinSubArrayLen((int) '4', intArray55);
        int[] intArray60 = new int[] { (byte) 10, '#', (-1) };
        int int62 = util53.findKthLargestViaQuickSort(intArray60, (int) (byte) 1);
        int int64 = util43.findKthLargestViaQuickSort(intArray60, (int) (short) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int[] intArray78 = new int[] { (short) -1, 10, '4' };
        util65.getNextPermutationNumber(intArray78);
        util43.getNextPermutationNumber(intArray78);
        int int81 = util42.findMinViaIteration(intArray78);
        util0.getNextPermutationNumber(intArray78);
        Class<?> wildcardClass83 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        util16.getNextPermutationNumber(intArray24);
        int[] intArray34 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int36 = util16.threeSumClosest(intArray34, 0);
        Util util38 = new Util();
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        util38.getNextPermutationNumber(intArray46);
        int int50 = util16.findMinSubArrayLen(52, intArray46);
        int[] intArray55 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int57 = util16.threeSumClosest(intArray55, (-1));
        util0.getNextPermutationNumber(intArray55);
        Util util59 = new Util();
        Util util60 = new Util();
        int[] intArray62 = null;
        int int63 = util60.findMinSubArrayLen((int) '4', intArray62);
        int[] intArray67 = new int[] { (byte) 10, '#', (-1) };
        int int69 = util60.findKthLargestViaQuickSort(intArray67, (int) (byte) 1);
        util59.getNextPermutationNumber(intArray67);
        int[] intArray77 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int79 = util59.threeSumClosest(intArray77, 0);
        util0.getNextPermutationNumber(intArray77);
        Class<?> wildcardClass81 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[-1, -1, 10, 35, 100, 52]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) ' ', intArray7);
        int[] intArray9 = null;
        int int11 = util5.findKthLargestViaQuickSort(intArray9, 52);
        Util util12 = new Util();
        int[] intArray14 = null;
        int int15 = util12.findMinSubArrayLen((int) '4', intArray14);
        int[] intArray19 = new int[] { (byte) 10, '#', (-1) };
        int int21 = util12.findKthLargestViaQuickSort(intArray19, (int) (byte) 1);
        int[] intArray25 = new int[] { (short) -1, 10, '4' };
        util12.getNextPermutationNumber(intArray25);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        Util util37 = new Util();
        int[] intArray39 = null;
        int int40 = util37.findMinSubArrayLen((int) '4', intArray39);
        int[] intArray44 = new int[] { (byte) 10, '#', (-1) };
        int int46 = util37.findKthLargestViaQuickSort(intArray44, (int) (byte) 1);
        int int48 = util27.findKthLargestViaQuickSort(intArray44, (int) (short) 1);
        Util util49 = new Util();
        int[] intArray51 = null;
        int int52 = util49.findMinSubArrayLen((int) '4', intArray51);
        int[] intArray56 = new int[] { (byte) 10, '#', (-1) };
        int int58 = util49.findKthLargestViaQuickSort(intArray56, (int) (byte) 1);
        int[] intArray62 = new int[] { (short) -1, 10, '4' };
        util49.getNextPermutationNumber(intArray62);
        util27.getNextPermutationNumber(intArray62);
        int int65 = util12.removeDuplicateElements(intArray62);
        int int66 = util5.removeDuplicateElements(intArray62);
        int int67 = util0.findMinSubArrayLen(5, intArray62);
        Class<?> wildcardClass68 = intArray62.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        int[] intArray4 = null;
        util0.getNextPermutationNumber(intArray4);
        Util util6 = new Util();
        int[] intArray8 = null;
        int int9 = util6.findMinSubArrayLen((int) '4', intArray8);
        int[] intArray13 = new int[] { (byte) 10, '#', (-1) };
        int int15 = util6.findKthLargestViaQuickSort(intArray13, (int) (byte) 1);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int int27 = util6.findKthLargestViaQuickSort(intArray23, (int) (short) 1);
        Util util28 = new Util();
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        util28.getNextPermutationNumber(intArray36);
        int[] intArray46 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int48 = util28.threeSumClosest(intArray46, 0);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int int60 = util28.findMinSubArrayLen((int) (short) 1, intArray57);
        util6.getNextPermutationNumber(intArray57);
        int int63 = util0.findKthLargestViaQuickSort(intArray57, 4);
        Util util64 = new Util();
        int[] intArray66 = null;
        int int67 = util64.findMinSubArrayLen((int) '4', intArray66);
        Util util68 = new Util();
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        util68.getNextPermutationNumber(intArray76);
        int[] intArray86 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int88 = util68.threeSumClosest(intArray86, 0);
        int int89 = util64.removeDuplicateElements(intArray86);
        int[] intArray91 = new int[] { (byte) 10 };
        int int93 = util64.threeSumClosest(intArray91, 7);
        int int95 = util0.findKthLargestViaQuickSort(intArray91, 100);
        Class<?> wildcardClass96 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[10]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        int[] intArray14 = new int[] { (short) -1, 10, '4' };
        util1.getNextPermutationNumber(intArray14);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int37 = util16.findKthLargestViaQuickSort(intArray33, (int) (short) 1);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        int[] intArray51 = new int[] { (short) -1, 10, '4' };
        util38.getNextPermutationNumber(intArray51);
        util16.getNextPermutationNumber(intArray51);
        int int54 = util1.removeDuplicateElements(intArray51);
        int int56 = util0.threeSumClosest(intArray51, (int) (short) 0);
        int[] intArray57 = null;
        int int59 = util0.threeSumClosest(intArray57, 1);
        Class<?> wildcardClass60 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        util15.getNextPermutationNumber(intArray23);
        int[] intArray33 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int35 = util15.threeSumClosest(intArray33, 0);
        Util util37 = new Util();
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        int[] intArray45 = new int[] { (byte) 10, '#', (-1) };
        int int47 = util38.findKthLargestViaQuickSort(intArray45, (int) (byte) 1);
        util37.getNextPermutationNumber(intArray45);
        int int49 = util15.findMinSubArrayLen(52, intArray45);
        int[] intArray54 = new int[] { (byte) 10, (short) 1, 7, (short) 0 };
        int int56 = util15.threeSumClosest(intArray54, (-1));
        int int58 = util0.findKthLargestViaQuickSort(intArray54, (int) 'a');
        int[] intArray59 = null;
        int int61 = util0.threeSumClosest(intArray59, (int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 1, 7, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        int[] intArray16 = null;
        int int18 = util0.findKthLargestViaQuickSort(intArray16, 4);
        Class<?> wildcardClass19 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) ' ', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int[] intArray18 = new int[] { (short) -1, 10, '4' };
        util5.getNextPermutationNumber(intArray18);
        int int20 = util0.findMinSubArrayLen((int) '#', intArray18);
        Util util21 = new Util();
        int[] intArray23 = null;
        int int24 = util21.findMinSubArrayLen((int) '4', intArray23);
        Util util26 = new Util();
        int[] intArray28 = null;
        int int29 = util26.findMinSubArrayLen((int) '4', intArray28);
        int[] intArray33 = new int[] { (byte) 10, '#', (-1) };
        int int35 = util26.findKthLargestViaQuickSort(intArray33, (int) (byte) 1);
        int int36 = util21.findMinSubArrayLen((int) '#', intArray33);
        int int37 = util0.findMinViaIteration(intArray33);
        int[] intArray41 = new int[] { (byte) 100, 52, (short) 0 };
        int int43 = util0.threeSumClosest(intArray41, (int) (short) 1);
        Class<?> wildcardClass44 = intArray41.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 35 + "'", int35 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 52, 100]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        util0.getNextPermutationNumber(intArray21);
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) ' ', intArray26);
        Util util29 = new Util();
        int[] intArray31 = null;
        int int32 = util29.findMinSubArrayLen((int) '4', intArray31);
        int[] intArray36 = new int[] { (byte) 10, '#', (-1) };
        int int38 = util29.findKthLargestViaQuickSort(intArray36, (int) (byte) 1);
        int[] intArray42 = new int[] { (short) -1, 10, '4' };
        util29.getNextPermutationNumber(intArray42);
        int int44 = util24.findMinSubArrayLen((int) '#', intArray42);
        int int45 = util0.findMinSubArrayLen((int) 'a', intArray42);
        Util util46 = new Util();
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        int[] intArray54 = new int[] { (byte) 10, '#', (-1) };
        int int56 = util47.findKthLargestViaQuickSort(intArray54, (int) (byte) 1);
        util46.getNextPermutationNumber(intArray54);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int[] intArray71 = new int[] { (short) -1, 10, '4' };
        util58.getNextPermutationNumber(intArray71);
        Util util73 = new Util();
        int[] intArray75 = null;
        int int76 = util73.findMinSubArrayLen((int) '4', intArray75);
        int[] intArray80 = new int[] { (byte) 10, '#', (-1) };
        int int82 = util73.findKthLargestViaQuickSort(intArray80, (int) (byte) 1);
        Util util83 = new Util();
        int[] intArray85 = null;
        int int86 = util83.findMinSubArrayLen((int) '4', intArray85);
        int[] intArray90 = new int[] { (byte) 10, '#', (-1) };
        int int92 = util83.findKthLargestViaQuickSort(intArray90, (int) (byte) 1);
        int int94 = util73.findKthLargestViaQuickSort(intArray90, (int) (short) 1);
        util58.getNextPermutationNumber(intArray90);
        int int97 = util46.threeSumClosest(intArray90, 100);
        util0.getNextPermutationNumber(intArray90);
        Class<?> wildcardClass99 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 35 + "'", int82 == 35);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 35 + "'", int92 == 35);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 35 + "'", int94 == 35);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        int[] intArray6 = null;
        int int7 = util4.findMinSubArrayLen((int) '4', intArray6);
        Util util9 = new Util();
        int[] intArray11 = null;
        int int12 = util9.findMinSubArrayLen((int) '4', intArray11);
        int[] intArray16 = new int[] { (byte) 10, '#', (-1) };
        int int18 = util9.findKthLargestViaQuickSort(intArray16, (int) (byte) 1);
        int int19 = util4.findMinSubArrayLen((int) '#', intArray16);
        util0.getNextPermutationNumber(intArray16);
        int[] intArray21 = null;
        int int23 = util0.findKthLargestViaQuickSort(intArray21, (int) 'a');
        Util util24 = new Util();
        int[] intArray26 = null;
        int int27 = util24.findMinSubArrayLen((int) '4', intArray26);
        int[] intArray31 = new int[] { (byte) 10, '#', (-1) };
        int int33 = util24.findKthLargestViaQuickSort(intArray31, (int) (byte) 1);
        Util util34 = new Util();
        int[] intArray36 = null;
        int int37 = util34.findMinSubArrayLen((int) '4', intArray36);
        int[] intArray41 = new int[] { (byte) 10, '#', (-1) };
        int int43 = util34.findKthLargestViaQuickSort(intArray41, (int) (byte) 1);
        int[] intArray47 = new int[] { (short) -1, 10, '4' };
        util34.getNextPermutationNumber(intArray47);
        Util util50 = new Util();
        int[] intArray52 = null;
        int int53 = util50.findMinSubArrayLen((int) '4', intArray52);
        int[] intArray57 = new int[] { (byte) 10, '#', (-1) };
        int int59 = util50.findKthLargestViaQuickSort(intArray57, (int) (byte) 1);
        int[] intArray63 = new int[] { (short) -1, 10, '4' };
        util50.getNextPermutationNumber(intArray63);
        int int65 = util34.findMinSubArrayLen(0, intArray63);
        int int67 = util24.findKthLargestViaQuickSort(intArray63, 1);
        int int68 = util0.findMinViaIteration(intArray63);
        Util util69 = new Util();
        int[] intArray71 = null;
        int int72 = util69.findMinSubArrayLen((int) '4', intArray71);
        int[] intArray76 = new int[] { (byte) 10, '#', (-1) };
        int int78 = util69.findKthLargestViaQuickSort(intArray76, (int) (byte) 1);
        Util util79 = new Util();
        int[] intArray81 = null;
        int int82 = util79.findMinSubArrayLen((int) '4', intArray81);
        int[] intArray86 = new int[] { (byte) 10, '#', (-1) };
        int int88 = util79.findKthLargestViaQuickSort(intArray86, (int) (byte) 1);
        int int90 = util69.findKthLargestViaQuickSort(intArray86, (int) (short) 1);
        int int92 = util0.findKthLargestViaQuickSort(intArray86, (int) (short) -1);
        Class<?> wildcardClass93 = intArray86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 52 + "'", int67 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 35 + "'", int88 == 35);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 35 + "'", int90 == 35);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util4 = new Util();
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        util4.getNextPermutationNumber(intArray12);
        int int17 = util0.threeSumClosest(intArray12, (int) (short) 100);
        int[] intArray18 = null;
        int int20 = util0.threeSumClosest(intArray18, 7);
        Util util22 = new Util();
        int[] intArray24 = null;
        int int25 = util22.findMinSubArrayLen((int) '4', intArray24);
        int[] intArray29 = new int[] { (byte) 10, '#', (-1) };
        int int31 = util22.findKthLargestViaQuickSort(intArray29, (int) (byte) 1);
        Util util32 = new Util();
        int[] intArray34 = null;
        int int35 = util32.findMinSubArrayLen((int) '4', intArray34);
        int[] intArray39 = new int[] { (byte) 10, '#', (-1) };
        int int41 = util32.findKthLargestViaQuickSort(intArray39, (int) (byte) 1);
        int int43 = util22.findKthLargestViaQuickSort(intArray39, (int) (short) 1);
        int[] intArray44 = null;
        util22.getNextPermutationNumber(intArray44);
        Util util47 = new Util();
        int[] intArray49 = null;
        int int50 = util47.findMinSubArrayLen((int) '4', intArray49);
        Util util51 = new Util();
        Util util52 = new Util();
        int[] intArray54 = null;
        int int55 = util52.findMinSubArrayLen((int) '4', intArray54);
        int[] intArray59 = new int[] { (byte) 10, '#', (-1) };
        int int61 = util52.findKthLargestViaQuickSort(intArray59, (int) (byte) 1);
        Util util62 = new Util();
        int[] intArray64 = null;
        int int65 = util62.findMinSubArrayLen((int) '4', intArray64);
        int[] intArray69 = new int[] { (byte) 10, '#', (-1) };
        int int71 = util62.findKthLargestViaQuickSort(intArray69, (int) (byte) 1);
        int int73 = util52.findKthLargestViaQuickSort(intArray69, (int) (short) 1);
        Util util74 = new Util();
        int[] intArray76 = null;
        int int77 = util74.findMinSubArrayLen((int) '4', intArray76);
        int[] intArray81 = new int[] { (byte) 10, '#', (-1) };
        int int83 = util74.findKthLargestViaQuickSort(intArray81, (int) (byte) 1);
        int[] intArray87 = new int[] { (short) -1, 10, '4' };
        util74.getNextPermutationNumber(intArray87);
        util52.getNextPermutationNumber(intArray87);
        int int90 = util51.findMinViaIteration(intArray87);
        util47.getNextPermutationNumber(intArray87);
        int int92 = util22.findMinSubArrayLen((int) (short) -1, intArray87);
        int int93 = util0.findMinSubArrayLen(1, intArray87);
        Class<?> wildcardClass94 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 35 + "'", int73 == 35);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        Util util0 = new Util();
        Util util1 = new Util();
        int[] intArray3 = null;
        int int4 = util1.findMinSubArrayLen((int) '4', intArray3);
        int[] intArray8 = new int[] { (byte) 10, '#', (-1) };
        int int10 = util1.findKthLargestViaQuickSort(intArray8, (int) (byte) 1);
        Util util11 = new Util();
        int[] intArray13 = null;
        int int14 = util11.findMinSubArrayLen((int) '4', intArray13);
        int[] intArray18 = new int[] { (byte) 10, '#', (-1) };
        int int20 = util11.findKthLargestViaQuickSort(intArray18, (int) (byte) 1);
        int int22 = util1.findKthLargestViaQuickSort(intArray18, (int) (short) 1);
        Util util23 = new Util();
        int[] intArray25 = null;
        int int26 = util23.findMinSubArrayLen((int) '4', intArray25);
        int[] intArray30 = new int[] { (byte) 10, '#', (-1) };
        int int32 = util23.findKthLargestViaQuickSort(intArray30, (int) (byte) 1);
        int[] intArray36 = new int[] { (short) -1, 10, '4' };
        util23.getNextPermutationNumber(intArray36);
        util1.getNextPermutationNumber(intArray36);
        int int39 = util0.removeDuplicateElements(intArray36);
        Util util40 = new Util();
        int[] intArray42 = null;
        int int43 = util40.findMinSubArrayLen((int) '4', intArray42);
        int[] intArray47 = new int[] { (byte) 10, '#', (-1) };
        int int49 = util40.findKthLargestViaQuickSort(intArray47, (int) (byte) 1);
        int[] intArray53 = new int[] { (short) -1, 10, '4' };
        util40.getNextPermutationNumber(intArray53);
        Util util55 = new Util();
        int[] intArray57 = null;
        int int58 = util55.findMinSubArrayLen((int) '4', intArray57);
        int[] intArray62 = new int[] { (byte) 10, '#', (-1) };
        int int64 = util55.findKthLargestViaQuickSort(intArray62, (int) (byte) 1);
        Util util65 = new Util();
        int[] intArray67 = null;
        int int68 = util65.findMinSubArrayLen((int) '4', intArray67);
        int[] intArray72 = new int[] { (byte) 10, '#', (-1) };
        int int74 = util65.findKthLargestViaQuickSort(intArray72, (int) (byte) 1);
        int int76 = util55.findKthLargestViaQuickSort(intArray72, (int) (short) 1);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        util55.getNextPermutationNumber(intArray90);
        int int93 = util40.removeDuplicateElements(intArray90);
        int int95 = util0.threeSumClosest(intArray90, (int) (short) 10);
        Class<?> wildcardClass96 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util15 = new Util();
        int[] intArray17 = null;
        int int18 = util15.findMinSubArrayLen((int) '4', intArray17);
        int[] intArray22 = new int[] { (byte) 10, '#', (-1) };
        int int24 = util15.findKthLargestViaQuickSort(intArray22, (int) (byte) 1);
        Util util25 = new Util();
        int[] intArray27 = null;
        int int28 = util25.findMinSubArrayLen((int) '4', intArray27);
        int[] intArray32 = new int[] { (byte) 10, '#', (-1) };
        int int34 = util25.findKthLargestViaQuickSort(intArray32, (int) (byte) 1);
        int int36 = util15.findKthLargestViaQuickSort(intArray32, (int) (short) 1);
        util0.getNextPermutationNumber(intArray32);
        Util util38 = new Util();
        int[] intArray40 = null;
        int int41 = util38.findMinSubArrayLen((int) '4', intArray40);
        Util util42 = new Util();
        Util util43 = new Util();
        int[] intArray45 = null;
        int int46 = util43.findMinSubArrayLen((int) '4', intArray45);
        int[] intArray50 = new int[] { (byte) 10, '#', (-1) };
        int int52 = util43.findKthLargestViaQuickSort(intArray50, (int) (byte) 1);
        util42.getNextPermutationNumber(intArray50);
        int[] intArray60 = new int[] { (short) -1, (byte) -1, '4', (short) 10, 100, 35 };
        int int62 = util42.threeSumClosest(intArray60, 0);
        int int63 = util38.removeDuplicateElements(intArray60);
        int int65 = util0.threeSumClosest(intArray60, 0);
        Util util66 = new Util();
        int[] intArray68 = null;
        int int69 = util66.findMinSubArrayLen((int) '4', intArray68);
        Util util70 = new Util();
        Util util71 = new Util();
        int[] intArray73 = null;
        int int74 = util71.findMinSubArrayLen((int) '4', intArray73);
        int[] intArray78 = new int[] { (byte) 10, '#', (-1) };
        int int80 = util71.findKthLargestViaQuickSort(intArray78, (int) (byte) 1);
        util70.getNextPermutationNumber(intArray78);
        int int83 = util66.threeSumClosest(intArray78, (int) (short) 100);
        util0.getNextPermutationNumber(intArray78);
        int[] intArray85 = null;
        int int87 = util0.threeSumClosest(intArray85, (int) (short) 10);
        Class<?> wildcardClass88 = util0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, -1, 10, 35, 52, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        int[] intArray7 = new int[] { (byte) 10, '#', (-1) };
        int int9 = util0.findKthLargestViaQuickSort(intArray7, (int) (byte) 1);
        int[] intArray13 = new int[] { (short) -1, 10, '4' };
        util0.getNextPermutationNumber(intArray13);
        Util util16 = new Util();
        int[] intArray18 = null;
        int int19 = util16.findMinSubArrayLen((int) '4', intArray18);
        int[] intArray23 = new int[] { (byte) 10, '#', (-1) };
        int int25 = util16.findKthLargestViaQuickSort(intArray23, (int) (byte) 1);
        int[] intArray29 = new int[] { (short) -1, 10, '4' };
        util16.getNextPermutationNumber(intArray29);
        int int31 = util0.findMinSubArrayLen(0, intArray29);
        Util util33 = new Util();
        int[] intArray35 = null;
        int int36 = util33.findMinSubArrayLen((int) '4', intArray35);
        int[] intArray40 = new int[] { (byte) 10, '#', (-1) };
        int int42 = util33.findKthLargestViaQuickSort(intArray40, (int) (byte) 1);
        int[] intArray46 = new int[] { (short) -1, 10, '4' };
        util33.getNextPermutationNumber(intArray46);
        Util util48 = new Util();
        int[] intArray50 = null;
        int int51 = util48.findMinSubArrayLen((int) '4', intArray50);
        int[] intArray55 = new int[] { (byte) 10, '#', (-1) };
        int int57 = util48.findKthLargestViaQuickSort(intArray55, (int) (byte) 1);
        Util util58 = new Util();
        int[] intArray60 = null;
        int int61 = util58.findMinSubArrayLen((int) '4', intArray60);
        int[] intArray65 = new int[] { (byte) 10, '#', (-1) };
        int int67 = util58.findKthLargestViaQuickSort(intArray65, (int) (byte) 1);
        int int69 = util48.findKthLargestViaQuickSort(intArray65, (int) (short) 1);
        util33.getNextPermutationNumber(intArray65);
        int int71 = util0.findMinSubArrayLen((int) (short) 10, intArray65);
        Util util72 = new Util();
        int[] intArray74 = null;
        int int75 = util72.findMinSubArrayLen((int) ' ', intArray74);
        Util util77 = new Util();
        int[] intArray79 = null;
        int int80 = util77.findMinSubArrayLen((int) '4', intArray79);
        int[] intArray84 = new int[] { (byte) 10, '#', (-1) };
        int int86 = util77.findKthLargestViaQuickSort(intArray84, (int) (byte) 1);
        int[] intArray90 = new int[] { (short) -1, 10, '4' };
        util77.getNextPermutationNumber(intArray90);
        int int92 = util72.findMinSubArrayLen((int) '#', intArray90);
        int int94 = util0.threeSumClosest(intArray90, 1);
        Class<?> wildcardClass95 = intArray90.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 52, 10]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 10]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 35 + "'", int69 == 35);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        Util util0 = new Util();
        int[] intArray2 = null;
        int int3 = util0.findMinSubArrayLen((int) '4', intArray2);
        Util util5 = new Util();
        int[] intArray7 = null;
        int int8 = util5.findMinSubArrayLen((int) '4', intArray7);
        int[] intArray12 = new int[] { (byte) 10, '#', (-1) };
        int int14 = util5.findKthLargestViaQuickSort(intArray12, (int) (byte) 1);
        int int15 = util0.findMinSubArrayLen((int) '#', intArray12);
        Util util16 = new Util();
        Util util17 = new Util();
        int[] intArray19 = null;
        int int20 = util17.findMinSubArrayLen((int) '4', intArray19);
        int[] intArray24 = new int[] { (byte) 10, '#', (-1) };
        int int26 = util17.findKthLargestViaQuickSort(intArray24, (int) (byte) 1);
        Util util27 = new Util();
        int[] intArray29 = null;
        int int30 = util27.findMinSubArrayLen((int) '4', intArray29);
        int[] intArray34 = new int[] { (byte) 10, '#', (-1) };
        int int36 = util27.findKthLargestViaQuickSort(intArray34, (int) (byte) 1);
        int int38 = util17.findKthLargestViaQuickSort(intArray34, (int) (short) 1);
        Util util39 = new Util();
        int[] intArray41 = null;
        int int42 = util39.findMinSubArrayLen((int) '4', intArray41);
        int[] intArray46 = new int[] { (byte) 10, '#', (-1) };
        int int48 = util39.findKthLargestViaQuickSort(intArray46, (int) (byte) 1);
        int[] intArray52 = new int[] { (short) -1, 10, '4' };
        util39.getNextPermutationNumber(intArray52);
        util17.getNextPermutationNumber(intArray52);
        int int55 = util16.findMinViaIteration(intArray52);
        int int57 = util0.threeSumClosest(intArray52, (int) (byte) 10);
        Class<?> wildcardClass58 = intArray52.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 10, 35]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 10, 52]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }
}

